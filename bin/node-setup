#!/bin/bash
#
# AllStarLink Asterisk configure script
# by N8THN Feb. 012, 2018
# VERSION 1.90
# release date 20180323-1
# Major rework by WD6AWP April 2021
# ASL3 rework/updates by WA3WCO Jan/Feb 2024

ALLMON3_INI="${DESTDIR}/etc/allmon3/allmon3.ini"
ALLMON3_RESTART=0
ASL_DEBUG=""
ASL_UPDATED=${ASL_UPDATED:-0}
ASL_VERSION=$(asl-show-version --asl)
ASTERISK=/usr/sbin/asterisk
ASTRES=/usr/bin/astres.sh
AST_RECONFIG=0
AST_RESTART=${AST_RESTART:-0}
CONFIG_DIR=${CONFIG_DIR:-"${DESTDIR}/etc/asterisk"}
MSGBOX_HEIGHT=12
MSGBOX_WIDTH=60
NEED_TUNE=0
SUB_MENU=0
TITLE="AllStarLink $ASL_VERSION"

logfile=/dev/null

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

check_if_root() {
    if [[ $EUID != 0 ]]; then
	whiptail --msgbox "This script must be run as root or with sudo" $MSGBOX_HEIGHT $MSGBOX_WIDTH
	exit 1
    fi
}

check_configuration() {
    if [[ ! -f $CONFIG_DIR/rpt.conf ]]; then
	whiptail --msgbox "Expected configuration files not found in \"$CONFIG_DIR\" directory" $MSGBOX_HEIGHT $MSGBOX_WIDTH
	exit 1
    fi
}

update_file_permissions() {
    ASTERISK_USER=$(stat --format="%U" "$CONFIG_DIR")
    chown $ASTERISK_USER $*

    ASL_UPDATED=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

calc_wt_size() {
#   echo "doing calc_wt_size" >>$logfile

    # Bash knows the terminal size
    #   The number of columns are $COLUMNS
    #   The number of lines are $LINES

    if [[ $LINES -lt 22 ]]; then
	echo "Terminal size must be at least 22 lines."
	exit 1
    fi
    if [[ $COLUMNS -lt 60 ]]; then
	echo "Terminal size must be at least 60 columns."
	exit 1
    fi

    WT_HEIGHT=22

    # Leave full width up to 100 columns
    WT_WIDTH=$COLUMNS
    if [[ $COLUMNS -gt 100 ]]; then
	WT_WIDTH=100
    fi

    WT_MENU_HEIGHT=$(($WT_HEIGHT - 8))
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

TEMPLATE_EDIT_START() {
    F="${1}"	# file

    #
    # Extracting (and editing) a node (e.g. "[1234]") in a templated
    # configuration file is tricky when no node/category follows.  To
    # address this we temporarily add a [category] at end of the file.
    #

    # if missing, add EOL to the end of the file
    tail -c1 "${F}" | read -r _ || printf '\n'	>> "${F}"

    # if present, remove any [old] temporary category
    sed -i -e "/^\[asl-menu]/d"			"${F}"

    # add our temporary category
    echo "[asl-menu]"				>> "${F}"
}

TEMPLATE_EDIT_END() {
    F="${1}"	# file

    #
    # Remove our temporary [category]
    #
    sed -i -e "/^\[asl-menu]/d"			"${F}"
}

TEMPLATE_CATEGORY_ADD() {
    C="${1}"	# category
    T="${2}"	# template
    F="${3}"	# file

    # check if the [category] already exists
    grep -q "^\[${C}]"				"${F}"
    if [[ $? -eq 0 ]]; then
	return
    fi

    if [ -n "${T}" ]; then
	T="(${T})"
    fi

    #
    # add the [category]
    #
    # ... and add the per-node category
    sed -i -e "/^\[asl-menu]/i\\
\\
[${C}]${T}\\
"						"${F}"
}

TEMPLATE_CATEGORY_REMOVE() {
    C="${1}"	# category
    F="${2}"	# file

    #
    # remove the [category]
    #
    AWK_TMP=$(mktemp)
    cp "${F}" $AWK_TMP
    awk "BEGIN { p=1; }
	 /^\[${C}]/ { p=0; next; }
	 /^\[/      { p=1; }
	 p==1       { print; }
	"				$AWK_TMP > "${F}"
    rm $AWK_TMP
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_astres() {
    $ASTRES
    RC=$?
    if [ $RC -ne 0 ]; then
	whiptail --msgbox "Asterisk restart failed (exit code $RC)." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	return
    fi

    AST_RESTART=0
    AST_RECONFIG=0

    # check if Allmon3 also needs to be restarted
    if [[ $ALLMON3_RESTART -eq 1 ]]; then
	systemctl restart allmon3
	ALLMON3_RESTART=0
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_backup_restore_menu() {
    echo "do_backup_restore_menu" >>$logfile

    /usr/bin/asl-backup-menu --sub-menu $ASL_DEBUG
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_query_node_callsign() {
    echo "..doing do_query_node_callsign" >>$logfile

    while true; do
	calc_wt_size

	ANSWER="$CURRENT_CALLSIGN"
	if [[ "$CURRENT_CALLSIGN" = "NOTSET" ]]; then
	    ANSWER=""
	fi

	if [[ "$CURRENT_CALLSIGN" != "NOTSET" ]]; then
	    INPUT_TEXT="The current call sign for node $CURRENT_NODE is $CURRENT_CALLSIGN.\n\nEnter new call sign :"
	else
	    INPUT_TEXT="The call sign for node $CURRENT_NODE has not been set.\n\nEnter call sign :"
	fi

	ANSWER=$(whiptail				\
		    --title "$TITLE"			\
		    --inputbox "$INPUT_TEXT"		\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH	\
		    "$ANSWER"				\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return 1
	fi

	re=^[0-9A-Za-z/-]{3,}$
	if [[ $ANSWER =~ $re ]]; then
	    break
	fi

	whiptail	\
	    --msgbox "A call sign may contain only letters and numbers. The call must be 3 or more characters in length."	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
    done

    return 0
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_update_node_callsign() {
    echo "doing do_update_node_callsign" >>$logfile

    do_query_node_callsign
    if [[ $? -ne 0 ]]; then
	return
    fi

    if [[ $ANSWER = $CURRENT_CALLSIGN ]]; then
	return
    fi

    NEW_CALLSIGN="${ANSWER^^}"
    do_node_set_callsign
}

do_node_set_callsign() {
    echo "doing do_node_set_callsign" >>$logfile

    # Update callsign (for "ID")

    CALLSIGN_PREFIX=""
    if [[ -n "$NEW_CALLSIGN" ]]; then
	CALLSIGN_PREFIX="|i"
    fi

    TEMPLATE_EDIT_START $CONFIG_DIR/rpt.conf
	#
	# if present, remove any existing "idrecording" setting for
	# this node and then add the requested callsign
	#
	sed	-i							\
		-e "/^\[$CURRENT_NODE]/,/^\[/ { /^idrecording\s*=/d; }"	\
		-e "/^\[$CURRENT_NODE]/a\\
idrecording = ${CALLSIGN_PREFIX}${NEW_CALLSIGN}
"									$CONFIG_DIR/rpt.conf
    TEMPLATE_EDIT_END $CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_update_telemetry() {
    echo "doing do_update_telemetry" >>$logfile

    read -r -d '' TELEMETRY_TEXT << EOT
Nodes with no telemetry can be setup for either full or half duplex.  Full duplex is preferred when interfacing with an external multiport repeater controller.

Do you want to use full or half duplex?
EOT

    DEFAULT_BUTTON=""
    if [[ $CURRENT_LINKTOLINK = "no" ]]; then
	DEFAULT_BUTTON="--defaultno"
    fi

    whiptail								\
	--title "$TITLE"						\
	--yes-button "Full"						\
	--no-button "Half"						\
	$DEFAULT_BUTTON							\
	--yesno	"${TELEMETRY_TEXT}"					\
	$MSGBOX_HEIGHT $MSGBOX_WIDTH
    case $? in
	0) NEW_LINKTOLINK="yes"
	   ;;
	1) NEW_LINKTOLINK="no"
	   ;;
	*) NEW_LINKTOLINK=$CURRENT_LINKTOLINK
	   ;;
    esac
}

do_update_node_duplex() {
    echo "doing do_update_node_duplex" >>$logfile

    # Array of duplex choices
    duplex_modes=()
    if [[ $CURRENT_DUPLEX -eq 0 ]]; then
	if [[ $CURRENT_LINKTOLINK = "no" ]]; then
	    duplex_modes+=("HALF/Full duplex with no telemetry (link)")
	else
	    duplex_modes+=("Half/FULL duplex with no telemetry (link)")
	fi
    else
	duplex_modes+=("Half/Full duplex with no telemetry (link)")
    fi
    duplex_modes+=("Half duplex with telemetry (hotspot)")
    duplex_modes+=("Full Duplex with telemetry (repeater)")
    duplex_modes+=("Full Duplex with telemetry, in cabinet repeat")
    duplex_modes+=("Full Duplex with telemetry, no repeat w/autopatch")

    newarr=()
    for i in ${!duplex_modes[@]}; do
	if [[ $i -eq $CURRENT_DUPLEX ]]; then
	    ONOFF="ON"
	else
	    ONOFF="OFF"
	fi
	newarr+=("$i" "${duplex_modes[$i]}" "$ONOFF")
    done
    ((i++))

    ANSWER=$(whiptail							\
		--title "$TITLE"					\
		--radiolist "Select the duplex type.\n\nUse the arrow keys to scroll and the space bar to select."	\
		$WT_HEIGHT $WT_WIDTH					\
		$i							\
		"${newarr[@]}"						\
		3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
	return
    fi

    re=^[0-4]$
    if ! [[ $ANSWER =~ $re ]]; then
	whiptail --msgbox "Duplex type must be a number between 0 and 4." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    else
	if [[ $ANSWER -eq 0 ]]; then
	    do_update_telemetry
	else
	    NEW_LINKTOLINK=$CURRENT_LINKTOLINK
	fi
	if [[ "$CURRENT_DUPLEX"     != "$ANSWER"		||	\
	      "$CURRENT_LINKTOLINK" != "$NEW_LINKTOLINK"		\
	   ]]; then
	    NEW_DUPLEX=$ANSWER
	    do_set_duplex
	fi
    fi
}

do_set_duplex() {
    echo "doing do_set_duplex" >>$logfile

    TEMPLATE_EDIT_START $CONFIG_DIR/rpt.conf
	#
	# if changing to (or from) "Half/Full duplex with no telemetry",
	# update the "linktolink" setting.
	#
	if [[ $NEW_DUPLEX -eq 0 ]]; then
	    if [[ "$CURRENT_LINKTOLINK" != "$NEW_LINKTOLINK" ]]; then
		#
		# add "linktolink = (no | yes)"
		#
		sed -i								\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^linktolink\s*=/d; }"	\
		    -e "/^\[$CURRENT_NODE]/a\\
linktolink = $NEW_LINKTOLINK
"										$CONFIG_DIR/rpt.conf
		CURRENT_LINKTOLINK=$NEW_LINKTOLINK
	    fi

	    ADD_HANGTIME=0
	    if [[ $CURRENT_HANGTIME -eq 2000 ]]; then
		ADD_HANGTIME=1
	    elif [[ $CURRENT_DUPLEX -eq 1 && CURRENT_HANGTIME -eq 400 ]]; then
		ADD_HANGTIME=1
	    fi
	    if [[ $ADD_HANGTIME -eq 1 ]]; then
		#
		# add/change "hangtime = 100"
		#
		sed -i								\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^hangtime\s*=/d; }"	\
		    -e "/^\[$CURRENT_NODE]/a\\
hangtime = 100
"										$CONFIG_DIR/rpt.conf
	    fi
	elif [[ $CURRENT_DUPLEX -eq 0 ]]; then
	    if [[ "$CURRENT_LINKTOLINK" = "yes" ]]; then
		#
		# remove "linktolink = yes"
		#
		sed -i								\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^linktolink\s*=/d; }"	$CONFIG_DIR/rpt.conf
		CURRENT_LINKTOLINK="no"
	    fi

	    if [[ $CURRENT_HANGTIME -eq 100 ]]; then
		#
		# remove "hangtime = 100"
		#
		sed -i								\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^hangtime\s*=/d; }"	$CONFIG_DIR/rpt.conf
	    fi
	fi

	#
	# if changing to (or from) "Half-duplex w/telemetry", update the
	# "wait_times" setting.
	#
	if [[ $NEW_DUPLEX -eq 1 ]]; then
#	    grep -q "^\[wait-times_hd]"						$CONFIG_DIR/rpt.conf
#	    if [[ $? -eq 0 && "$CURRENT_WAIT_TIMES" = "wait-times" ]]; then
#		#
#		# add "wait_times = wait-times_hd"
#		#
#		sed -i								\
#		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^wait_times\s*=/d; }"	\
#		    -e "/^\[$CURRENT_NODE]/a\\
#wait_times = wait-times_hd
#"										$CONFIG_DIR/rpt.conf
#	    fi

	    ADD_HANGTIME=0
	    if [[ $CURRENT_HANGTIME -eq 2000 ]]; then
		ADD_HANGTIME=1
	    elif [[ $CURRENT_DUPLEX -eq 0 && CURRENT_HANGTIME -eq 100 ]]; then
		ADD_HANGTIME=1
	    fi
	    if [[ $ADD_HANGTIME -eq 1 ]]; then
		#
		# add "hangtime = 400"
		#
		sed -i								\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^hangtime\s*=/d; }"	\
		    -e "/^\[$CURRENT_NODE]/a\\
hangtime = 400
"										$CONFIG_DIR/rpt.conf
	    fi
	elif [[ $CURRENT_DUPLEX -eq 1 ]]; then
#	    grep -q "^\[wait-times]"						$CONFIG_DIR/rpt.conf
#	    if [[ $? -eq 0 && "$CURRENT_WAIT_TIMES" = "wait-times_hd" ]]; then
#		#
#		# remove "wait_times = wait-times_hd"
#		#
#		sed -i								\
#		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^wait_times\s*=/d; }"	$CONFIG_DIR/rpt.conf
#	    fi

	    if [[ $CURRENT_HANGTIME -eq 400 ]]; then
		#
		# remove "hangtime = 400"
		#
		sed -i								\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^hangtime\s*=/d; }"	$CONFIG_DIR/rpt.conf
	    fi
	fi

	#
	# if present, remove "duplex" from this node
	# ... and add new "duplex" to this node
	#
	sed	-i							\
		-e "/^\[$CURRENT_NODE]/,/^\[/ { /^duplex\s*=/d; }"	\
		-e "/^\[$CURRENT_NODE]/a\\
duplex = $NEW_DUPLEX
"									$CONFIG_DIR/rpt.conf
    TEMPLATE_EDIT_END $CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_update_iax_bindport() {
    echo "doing do_update_iax_bindport" >>$logfile

    get_iax_settings

    while true; do
	calc_wt_size

	ANSWER=$(whiptail						\
		    --title "$TITLE"					\
		    --inputbox "The current IAX server port is $CURRENT_BINDPORT.\n\nEnter new UDP port :"	\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH			\
		    "$CURRENT_BINDPORT"					\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return
	fi

	re=^[0-9]\+$
	if [[ $ANSWER =~ $re && $ANSWER -gt 0 && $ANSWER -lt 65536 ]]; then
	    break
	fi

	whiptail --msgbox "The port must be a number between 1 and 65535\n\nNote: the default port is 4569." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    done

    if [[ $ANSWER -eq $CURRENT_BINDPORT ]]; then
	return
    fi

    NEW_BINDPORT=$ANSWER
    do_set_iax_bindport
}

do_set_iax_bindport() {
    echo "doing do_set_iax_bindport" >>$logfile

    # set server IAX bindport
    sed -i -e "/^bindport\s*=\s*$CURRENT_BINDPORT/ s/$CURRENT_BINDPORT/$NEW_BINDPORT/"	$CONFIG_DIR/iax.conf

    # update node registrations

    # get node list
    nodes=( `grep "^\[[0-9][0-9]*]" $CONFIG_DIR/rpt.conf | sed -e 's/^\[//' -e 's/].*//'` )
    #echo "nodes = ${nodes[*]}"
    #echo "    # = ${#nodes[@]}"

    # update IAX port for all nodes
    SAVE_NODE=$CURRENT_NODE
    for i in ${!nodes[@]}; do
	CURRENT_NODE="${nodes[$i]}"

	TEMPLATE_EDIT_START $CONFIG_DIR/rpt.conf
	    # update the per-node bindport
	    sed -i					\
		-E					\
		-e "/^[0-9]+\s*=\s*radio@/		\
			{				\
			    s/:[0-9]+\//\//;		\
			    s/\//:$NEW_BINDPORT\//;	\
			    s/:4569\//\//		\
			}"				$CONFIG_DIR/rpt.conf
	TEMPLATE_EDIT_END $CONFIG_DIR/rpt.conf
    done
    CURRENT_NODE=$SAVE_NODE

    update_file_permissions $CONFIG_DIR/iax.conf $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_query_node_number() {
    echo "..doing do_query_node_number" >>$logfile

    if [[ "$1" != "update" ]]; then
	MSG="Enter new node number :"
    else
	MSG="The current node number is $CURRENT_NODE.\n\nEnter new node number :"
    fi

    while true; do
	calc_wt_size

	ANSWER=$(whiptail				\
		    --title "$TITLE"			\
		    --inputbox "$MSG"			\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH	\
		    ""					\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return 1
	fi

	re=^[0-9]{4,6}$
	if ! [[ $ANSWER =~ $re ]]; then
	    whiptail --msgbox "The node number must have 4-6 digits." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	elif [[ $ANSWER -lt 1000 ]]; then
	    whiptail --msgbox "Private node numbers start at 1000." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	elif [[ $ANSWER -ge 2000 && $ANSWER =~ ^1 ]]; then
	    whiptail --msgbox "Registered node numbers cannot start with a \"1\"." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	elif [[ ${nodes[@]} =~ $ANSWER ]]; then
	    whiptail --msgbox "Node number \"$ANSWER\" is already defined, please choose another." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	else
	    break
	fi
    done

    return 0
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_update_node_number() {
    echo "doing do_update_node_number" >>$logfile

    do_query_node_number update
    if [[ $? -ne 0 ]]; then
	return
    fi

    if [[ $ANSWER = $CURRENT_NODE ]]; then
	return
    fi

    NEW_NODE=$ANSWER
    do_node_rename
    CURRENT_NODE=$NEW_NODE
}

do_node_rename() {
    echo "doing do_node_rename" >>$logfile

    # Update appropriate rpt.conf lines
    sed -i										\
	-e "/^\[$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"				\
	-e "/^$CURRENT_NODE\s*=\s*/ s/$CURRENT_NODE/$NEW_NODE/g"			\
	-e "/^rxchannel\s*=\s*SimpleUSB\/$CURRENT_NODE\s*/ s/$CURRENT_NODE/$NEW_NODE/"	\
	-e "/^rxchannel\s*=\s*Radio\/$CURRENT_NODE\s*/ s/$CURRENT_NODE/$NEW_NODE/"	\
	-e "/^rxchannel\s*=\s*Voter\/$CURRENT_NODE\s*/ s/$CURRENT_NODE/$NEW_NODE/"	$CONFIG_DIR/rpt.conf

    if [[ $NEW_NODE -lt 2000 && $CURRENT_STATPOST != "No" ]]; then
	# disable statpost for private node
	SAVE_NODE=$CURRENT_NODE
	CURRENT_NODE=$NEW_NODE
	NEW_STATPOST="No"
	do_set_statpost
	CURRENT_NODE=$SAVE_NODE
    fi

    # Update appropriate rpt_http_registrations.conf lines
    if [[ $NEW_NODE -ge 2000 ]]; then
	#
	# Update node registration
	#
	# Note:
	# * The template node has a node # of "1234" and not "1999". Fix this first :-)
	# * Then, change node number.
	#
	sed -i										\
	    -e "/^register\s*=>\s*1234:abcdef@/ s/1234:abcdef/${CURRENT_NODE}:/"	\
	    -e "/^register\s*=>\s*${CURRENT_NODE}:/ s/$CURRENT_NODE/$NEW_NODE/"		$CONFIG_DIR/rpt_http_registrations.conf
    else
	#
	# Do not register private nodes
	#
	REM_NODE=$CURRENT_NODE
	do_node_remove_registration

	#
	# and clean up some cruft
	#
	egrep --quiet -e "^register.*=>*\s*1234:abcdef@"				$CONFIG_DIR/rpt_http_registrations.conf
	if [ $? -eq 0 ]; then
	    REM_NODE=1234
	    do_node_remove_registration
	fi
    fi

    # Update appropriate extensions.conf lines
    sed -i -e "/^NODE\s*=\s*[0-9]\+/ s/$CURRENT_NODE/$NEW_NODE/"			$CONFIG_DIR/extensions.conf

    # Update "save-node" configuration
    sed -i -e "/^NODE\s*=/ s/NODE\s*=.*/NODE=$NEW_NODE/"				$CONFIG_DIR/savenode.conf

    # Update "simpleusb" configuration
    sed -i -e "/^\[$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"				$CONFIG_DIR/simpleusb.conf

    # Update "usbradio" configuration
    sed -i -e "/^\[$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"				$CONFIG_DIR/usbradio.conf

    # Update "voter" configuration
    sed -i -e "/^\[$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"				$CONFIG_DIR/voter.conf

    update_file_permissions			\
	$CONFIG_DIR/rpt.conf			\
	$CONFIG_DIR/rpt_http_registrations.conf	\
	$CONFIG_DIR/extensions.conf		\
	$CONFIG_DIR/savenode.conf		\
	$CONFIG_DIR/simpleusb.conf		\
	$CONFIG_DIR/usbradio.conf		\
	$CONFIG_DIR/voter.conf

    # Update allowlist/denylist
    ALLOW_BLOCK_LIST=( `$ASTERISK -r -x "database show %list/${CURRENT_NODE}/%"		\
			| awk '/ results found/ { next; }				\
			       { print $1; next; }					\
			      '								\
		       `								\
		     )
    if [[ ${#ALLOW_BLOCK_LIST[@]} -gt 0 ]]; then
	for e in ${ALLOW_BLOCK_LIST[@]}; do
	    node=$(echo $e | awk -F/ '{ print $4 }')
	    case "$e" in
		/allowlist/${CURRENT_NODE}/* )
		    $ASTERISK -r -x "database put allowlist/$NEW_NODE $node \"allow node $node to connect to node $NEW_NODE\""
		    ;;
		/denylist/${CURRENT_NODE}/*  )
		    $ASTERISK -r -x "database put denylist/$NEW_NODE  $node \"block node $node from connecting to node $NEW_NODE\""
		    ;;
		* )
		    echo "Unexpected per-node database value (\"$e\")"
		    ;;
	    esac
	done
	$ASTERISK -r -x "database deltree allowlist $CURRENT_NODE"
	$ASTERISK -r -x "database deltree denylist $CURRENT_NODE"
    fi

    AST_RECONFIG=1
    AST_RESTART=1

    if [[ -f "${ALLMON3_INI}" ]]; then
	grep -q "^\[${CURRENT_NODE}]"					"${ALLMON3_INI}"
	if [[ $? -eq 0 ]]; then
	    sed -i -e "/^\[$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"	"${ALLMON3_INI}"
	    ALLMON3_RESTART=1
	fi
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_query_node_password() {
    echo "..doing do_query_node_password" >>$logfile

    while true; do
	calc_wt_size

	ANSWER="$CURRENT_PASSWORD"
	if [[ "$CURRENT_PASSWORD" = "=Not Set=" ]]; then
	    ANSWER=""
	fi

	ANSWER=$(whiptail							\
		    --title "$TITLE"						\
		    --inputbox "To register node $CURRENT_NODE with AllStarLink we need the password from \"www.allstarlink.org\", \"Portal\", \"Node Settings\".\n\nEnter the node password :"	\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH				\
		    "$ANSWER"							\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return 1
	fi

	re=^[0-9a-zA-Z_-]{6,}$
	if [[ $ANSWER =~ $re ]]; then
	    break
	fi

	whiptail								\
	    --msgbox "The node password may only contain letters, numbers, underscore and dash. It must be 6 or more characters in length."	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
    done

    return 0
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_update_node_password() {
    echo "doing do_update_node_password" >>$logfile

    do_query_node_password
    if [[ $? -ne 0 ]]; then
	return
    fi

    if [[ "$ANSWER" = "$CURRENT_PASSWORD" ]]; then
	return
    fi

    NEW_PASSWORD=$ANSWER
    do_node_set_password
}

do_node_set_password() {
    echo "doing do_node_set_password" >>$logfile

    # If private node, remove the registration
    if [[ $CURRENT_NODE -lt 2000 ]]; then
	REM_NODE=$CURRENT_NODE
	do_node_remove_registration
	return
    fi

    if [[ "$CURRENT_PASSWORD" = "=Not Set=" ]]; then
	CURRENT_PASSWORD=""
    fi

    # Check registration, add if missing
    egrep									\
	--quiet									\
	-e "^register.*=>*\s*1234:abcdef@"					\
	-e "^register.*=>*\s*$CURRENT_NODE:"					$CONFIG_DIR/rpt_http_registrations.conf
    if [ $? -ne 0 ]; then
	do_node_add_registration
    fi

    #
    # Update node registration
    #
    # Note:
    # * The template node has a node # of "1234" and not "1999". Fix this first :-)
    # * Then, change node password.
    #
    sed -i											\
	-e "/^register\s*=>\s*1234:abcdef@/ s/1234:abcdef/${CURRENT_NODE}:${CURRENT_PASSWORD}/"	\
	-e "/^register\s*=>\s*${CURRENT_NODE}:/ s/:${CURRENT_PASSWORD}@/:${NEW_PASSWORD}@/"	$CONFIG_DIR/rpt_http_registrations.conf

    # Update "save-node" configuration
    egrep --quiet "^NODE=$CURRENT_NODE$" /etc/asterisk/savenode.conf
    if [ $? -eq 0 ]; then
	#
	# if we are updating the node referenced in the "save-node" configuration
	# then we also need to update here (and mark as enabled).
	#
	sed -i									\
	    -e "/^PASSWORD\s*=/ s/PASSWORD\s*=.*/PASSWORD=$NEW_PASSWORD/"	\
	    -e "/^ENABLE\s*=/   s/ENABLE\s*=.*/ENABLE=1/"			$CONFIG_DIR/savenode.conf
    fi

    update_file_permissions $CONFIG_DIR/rpt_http_registrations.conf $CONFIG_DIR/savenode.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_update_node_statpost() {
    echo "doing do_update_node_statpost" >>$logfile

    if [[ $CURRENT_NODE -ge 2000 ]]; then
	# un/comment the statpost command in rpt.conf
	whiptail								\
	    --title "$TITLE"						\
	    --yesno "Enabling status posting to AllStarLink.org?"		\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
	case $? in
	    0)  NEW_STATPOST="Yes"
		;;
	    1)  NEW_STATPOST="No"
		;;
	    *)  return
		;;
	esac
    else
	whiptail								\
	    --title "$TITLE"							\
	    --msgbox "Status posting cannot be enabled for private nodes."	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
	NEW_STATPOST="No"
    fi

    if [[ $CURRENT_STATPOST = $NEW_STATPOST ]]; then
	return
    fi

    do_set_statpost
}

do_set_statpost() {
    echo "doing do_set_statpost" >>$logfile

    TEMPLATE_EDIT_START $CONFIG_DIR/rpt.conf
	#
	# if present, remove "statpost" from this node
	#
	sed -i -e "/^\[$CURRENT_NODE]/,/^\[/ { /^statpost_url\s*=/d; }"	$CONFIG_DIR/rpt.conf

	if [ $NEW_STATPOST = "Yes" ]; then
	    # if enabled, add "statpost" to this node
	    sed -i -e "/^\[$CURRENT_NODE]/a\\
statpost_url = http:\/\/stats.allstarlink.org\/uhandler
"									$CONFIG_DIR/rpt.conf
	fi
    TEMPLATE_EDIT_END $CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_update_ami_secret() {
    echo "doing do_update_ami_secret" >>$logfile

    get_ami_settings

    while true; do
	calc_wt_size

	ANSWER=$(whiptail								\
		    --title "$TITLE"							\
		    --inputbox "Enter the AMI secret for Allmon, Supermon, etc :"	\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH					\
		    "$CURRENT_AMI_SECRET"						\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return
	fi

	re=^[0-9a-zA-Z_-]{12,}$
	if [[ $ANSWER =~ $re ]]; then
	    break
	fi

	whiptail								\
	    --msgbox "The AMI secret may only contain letters, numbers, underscore and dash. It must be 12 or more characters in length."	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
    done

    if [[ "$ANSWER" = "$CURRENT_AMI_SECRET" ]]; then
	return
    fi

    NEW_AMI_SECRET=$ANSWER
    do_set_ami_secret
}

do_set_ami_secret() {
    echo "doing do_set_ami_secret" >>$logfile

    sed -i -e "/^secret\s*=\s*$CURRENT_AMI_SECRET/ s/$CURRENT_AMI_SECRET/$NEW_AMI_SECRET/"	$CONFIG_DIR/manager.conf

    update_file_permissions $CONFIG_DIR/manager.conf

    AST_RESTART=1

    if [[ -f "${ALLMON3_INI}" ]]; then
	sed -i -e "/^pass\s*=\s*$CURRENT_AMI_SECRET/ s/$CURRENT_AMI_SECRET/$NEW_AMI_SECRET/"	"${ALLMON3_INI}"
	ALLMON3_RESTART=1
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_query_node_interface() {
    echo "..doing do_query_node_interface ${1}" >>$logfile

    interface_types=()
    interface_types+=("1" "SimpleUSB    : CM1xx USB Cards no/DSP (URIx or RA-40)"	)
    interface_types+=("2" "USBRadio     : CM1xx USB Cards with DSP (URIx or RA-40)"	)
    if [[ "$1" = "full" ]]; then
	interface_types+=("3" "RTCM         : Radio Thin Client or Voter Boards"	)
	interface_types+=("4" "Dahdi/pseudo : No radio interface or HUB node"		)
	interface_types+=("5" "USRP"							)
    fi

    LABEL_CANCEL="Back"
    if [[ "$1" = "short" ]]; then
	LABEL_CANCEL="Skip"
    fi

    INTERFACE_SELECTION_SKIPPED=0

    DEFAULT_ITEM=0
    case "$CURRENT_INTERFACE_TYPE" in
	"SimpleUSB" ) DEFAULT_ITEM=1	;;
	"USBRadio"  ) DEFAULT_ITEM=2	;;
	"Voter"     ) DEFAULT_ITEM=3	;;
	"Pseudo"    ) DEFAULT_ITEM=4	;;
	"USRP"      ) DEFAULT_ITEM=5	;;
    esac

    ANSWER=$(whiptail					\
		--title "$TITLE"			\
		--menu "Select Radio Interface"		\
		--default-item=$DEFAULT_ITEM		\
		$WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT	\
		--ok-button "Select"			\
		--cancel-button "$LABEL_CANCEL"		\
		"${interface_types[@]}"			\
		3>&1 1>&2 2>&3)
    RC=$?
    if [[ $RC -ne 0 ]]; then
	if [[ $RC -eq 1 && "$LABEL_CANCEL" = "Skip" ]]; then
	    INTERFACE_SELECTION_SKIPPED=1
	    ANSWER=1
	else
	    return 1
	fi
    fi

    case "$ANSWER" in
	1) ANSWER="SimpleUSB"	;;
	2) ANSWER="USBRadio"	;;
	3) ANSWER="Voter"	;;
	4) ANSWER="Pseudo"	;;
	5) ANSWER="USRP"	;;
    esac

    return 0
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_update_node_interface() {
    echo "doing do_interface_type" >>$logfile

    do_query_node_interface full
    if [[ $? -ne 0 ]]; then
	return 1
    fi

    case "$ANSWER" in
	"SimpleUSB" ) do_node_set_simpleusb	;;
	"USBRadio"  ) do_node_set_usbradio	;;
	"Voter"     ) do_node_set_voter		;;
	"Pseudo"    ) do_node_set_pseudo	;;
	"USRP"      ) do_node_set_usrp		;;
	*) whiptail --msgbox "$ANSWER is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH 1 ;;
    esac
}

do_noload_chan_modules() {
    echo "..doing do_noload_chan_modules" >>$logfile

    # set common [app_rpt] channel modules to noload
    sed -i									\
	-e "/^load\s*=>\s*chan_simpleusb/ s/load/noload/"			\
	-e "/^load\s*=>\s*chan_usbradio/  s/load/noload/"			\
	-e "/^load\s*=>\s*chan_usrp/      s/load/noload/"			\
	-e "/^load\s*=>\s*chan_voter/     s/load/noload/"			\
	-e "/^load\s*=>\s*chan_pi/        s/load/noload/"			$CONFIG_DIR/modules.conf
}

do_load_chan_module() {
    echo "....doing do_load_chan_module ${1}" >>$logfile

    # load specific [app_rpt] channel module
    MODULE="chan_$1"

    sed -i -e "/^noload.\+${MODULE}/ s/noload/load/"				$CONFIG_DIR/modules.conf
}

do_load_chan_modules() {
    echo "..doing do_load_chan_modules" >>$logfile

    # load all [app_rpt] channel modules referenced in the configuration

    SAVE_NODE=$CURRENT_NODE

    # get node list
    nodes=( `grep "^\[[0-9][0-9]*]" $CONFIG_DIR/rpt.conf | sed -e 's/^\[//' -e 's/].*//'` )
    #echo "nodes = ${nodes[*]}"
    #echo "    # = ${#nodes[@]}"

    # ensure each node's channel driver is loaded
    for i in ${!nodes[@]}; do
	CURRENT_NODE="${nodes[$i]}"
	get_node_settings
	case "$CURRENT_INTERFACE_TYPE" in
	    "SimpleUSB" )
		do_load_chan_module "simpleusb"
		;;
	    "USBRadio" )
		do_load_chan_module "usbradio"
		;;
	    "Voter" )
		do_load_chan_module "voter"
		;;
	    "Pseudo" )
		do_load_chan_module "dahdi"
		;;
	    "USRP" )
		do_load_chan_module "usrp"
		;;
	esac
    done

    CURRENT_NODE=$SAVE_NODE
}

do_update_chan_modules() {
    echo "doing do_update_chan_modules" >>$logfile

    # Update modules
    do_noload_chan_modules
    do_load_chan_modules
}

do_set_rxchannel() {
    # set a nodes rxchannel
    RXCHANNEL="$1"

    TEMPLATE_EDIT_START $CONFIG_DIR/rpt.conf
	#
	# if present, remove "rxchannel" from this node
	# ... and add new "rxchannel" to this node
	#
	sed	-i								\
		-e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxchannel\s*=/d; }"		\
		-e "/^\[$CURRENT_NODE]/a\\
rxchannel = $RXCHANNEL
"										$CONFIG_DIR/rpt.conf
    TEMPLATE_EDIT_END $CONFIG_DIR/rpt.conf
}

do_node_set_simpleusb() {
    echo "doing do_node_set_simpleusb" >>$logfile

    if [ "$CURRENT_INTERFACE_TYPE" = "SimpleUSB" ]; then
	return
    fi

    # Set [node] rxchannel
    do_set_rxchannel "SimpleUSB/${CURRENT_NODE}"

    # Update modules
    do_update_chan_modules

    # Add the [node] to the SimpleUSB configuration
    TEMPLATE_EDIT_START	$CONFIG_DIR/simpleusb.conf

	grep -q "^\[node-main]"								$CONFIG_DIR/simpleusb.conf
	if [[ $? -eq 0 ]]; then
	    # if we are using templates

	    TEMPLATE_CATEGORY_ADD "${CURRENT_NODE}"	"node-main"			$CONFIG_DIR/simpleusb.conf

	    awk "/^\[${CURRENT_NODE}]/	{ p=1; next; }
		 /^\[/			{ p=0; next; }
		 p==1 && /^devstr\\s*=/	{ d=1; exit; }
					{ next; }
		 END			{ exit d }
		"									$CONFIG_DIR/simpleusb.conf
	    if [[ $? -eq 0 ]]; then
		# ... and add defaults for tune settings
		sed -i									\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^;;;;; .*Tune settings.*/d; }"	\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^devstr\s*=/d; }"			\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxmixerset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txmixaset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txmixbset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/a\\
\\
;;;;; Tune settings ;;;;;\\
devstr =\\
rxmixerset = 500\\
txmixbset = 500\\
txmixaset = 500
"											$CONFIG_DIR/simpleusb.conf
	    fi
	else
	    # if we are not using templates

	    TEMPLATE_CATEGORY_ADD "${CURRENT_NODE}"	""				$CONFIG_DIR/simpleusb.conf

	    awk "/^\[${CURRENT_NODE}]/	{ p=1; next; }
		 /^\[/			{ p=0; next; }
		 p==1 && /^devstr\\s*=/	{ d=1; exit; }
					{ next; }
		 END			{ exit d }
		"									$CONFIG_DIR/simpleusb.conf
	    if [[ $? -eq 0 ]]; then
		# ... and add defaults for tune settings
		sed -i									\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^;;;;; .*Tune settings.*/d; }"	\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^devstr\s*=/d; }"			\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxmixerset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txmixaset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txmixbset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/a\\
\\
eeprom = 0\\
hdwtype = 0\\
rxboost = no\\
carrierfrom = usbinvert\\
ctcssfrom = usbinvert\\
deemphasis = no\\
plfilter = yes\\
rxondelay = 0\\
txoffdelay = 0\\
txmixa = voice\\
txmixb = no\\
invertptt = no\\
preemphasis = no\\
\\
;;;;; Tune settings ;;;;;\\
devstr =\\
rxmixerset = 500\\
txmixbset = 500\\
txmixaset = 500
"											$CONFIG_DIR/simpleusb.conf
	    fi
	fi

    TEMPLATE_EDIT_END	$CONFIG_DIR/simpleusb.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf $CONFIG_DIR/simpleusb.conf

    AST_RECONFIG=1
    AST_RESTART=1
    NEED_TUNE=1
}

do_node_set_usbradio() {
    echo "doing do_node_set_usbradio" >>$logfile

    if [ "$CURRENT_INTERFACE_TYPE" = "USBRadio" ]; then
	return
    fi

    # Set [node] rxchannel
    do_set_rxchannel "Radio/${CURRENT_NODE}"

    # Update modules
    do_update_chan_modules

    # Add the [node] to the USBRadio configuration
    TEMPLATE_EDIT_START	$CONFIG_DIR/usbradio.conf

	grep -q "^\[node-main]"								$CONFIG_DIR/usbradio.conf
	if [[ $? -eq 0 ]]; then
	    # if we are using templates

	    TEMPLATE_CATEGORY_ADD "${CURRENT_NODE}"	"node-main"			$CONFIG_DIR/usbradio.conf

	    awk "/^\[${CURRENT_NODE}]/	{ p=1; next; }
		 /^\[/			{ p=0; next; }
		 p==1 && /^devstr\\s*=/	{ d=1; exit; }
					{ next; }
		 END			{ exit d }
		"									$CONFIG_DIR/usbradio.conf
            if [[ $? -eq 0 ]]; then
		# ... and add defaults for tune settings
		sed -i									\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^;;;;; .*Tune settings.*/d; }"	\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^devstr\s*=/d; }"			\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxmixerset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txmixaset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txmixbset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxvoiceadj\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxctcssadj\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txctcssadj\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxsquelchadj\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/a\\
\\
;;;;; Tune settings ;;;;;\\
devstr =\\
rxmixerset = 500\\
txmixaset = 500\\
txmixbset = 500\\
rxvoiceadj = 0.5\\
rxctcssadj = 0.5\\
txctcssadj = 200\\
rxsquelchadj = 500
"											$CONFIG_DIR/usbradio.conf
	    fi
	else
	    # if we are not using templates

	    TEMPLATE_CATEGORY_ADD "${CURRENT_NODE}"	""				$CONFIG_DIR/usbradio.conf

	    awk "/^\[${CURRENT_NODE}]/	{ p=1; next; }
		 /^\[/			{ p=0; next; }
		 p==1 && /^devstr\\s*=/	{ d=1; exit; }
					{ next; }
		 END			{ exit d }
		"									$CONFIG_DIR/usbradio.conf
	    if [[ $? -eq 0 ]]; then
		# ... and add defaults for tune settings
		sed -i									\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^;;;;; .*Tune settings.*/d; }"	\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^devstr\s*=/d; }"			\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxmixerset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txmixaset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txmixbset\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxvoiceadj\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxctcssadj\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^txctcssadj\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^rxsquelchadj\s*=/d; }"		\
		    -e "/^\[$CURRENT_NODE]/a\\
\\
eeprom = 0\\
hdwtype = 0\\
rxboost = yes\\
rxctcssrelax = 1\\
rxsqhyst = 3000\\
txctcssdefault = 100.0\\
rxctcssfreqs = 100.0,91.5\\
txctcssfreqs = 100.0,91.5\\
rxctcssoverride = no\\
carrierfrom = dsp\\
ctcssfrom = dsp\\
rxdemod = flat\\
rxsquelchdelay = 30\\
rxondelay = 0\\
txoffdelay = 0\\
txboost = no\\
txprelim = yes\\
txlimonly = yes\\
txtoctype = notone\\
txmixa = composite\\
txmixb = no\\
rxlpf = 0\\
rxhpf = 0\\
txlpf = 0\\
txhpf = 0\\
invertptt = yes\\
duplex = 0\\
duplex3 = 0\\
\\
;;;;; Tune settings ;;;;;\\
devstr =\\
rxmixerset = 500\\
txmixaset = 500\\
txmixbset = 500\\
rxvoiceadj = 0.5\\
rxctcssadj = 0.5\\
txctcssadj = 200\\
rxsquelchadj = 500
"											$CONFIG_DIR/usbradio.conf
	    fi
	fi

    TEMPLATE_EDIT_END	$CONFIG_DIR/usbradio.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf $CONFIG_DIR/usbradio.conf

    AST_RECONFIG=1
    AST_RESTART=1
    NEED_TUNE=1
}

do_node_set_voter() {
    echo "doing do_node_set_voter" >>$logfile

    if [ "$CURRENT_INTERFACE_TYPE" = "Voter" ]; then
	return
    fi

    # Set [node] rxchannel
    do_set_rxchannel "Voter/${CURRENT_NODE}"

    # Update modules
    do_update_chan_modules

    # Add the [node] to the Voter configuration
    TEMPLATE_EDIT_START	$CONFIG_DIR/voter.conf

	TEMPLATE_CATEGORY_ADD "${CURRENT_NODE}"	""				$CONFIG_DIR/voter.conf

	# ... and add sample voter settings
	sed -i									\
	    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^;NORTH\s*=/d; }"			\
	    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^;SOUTH\s*=/d; }"			\
	    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^;EAST\s*=/d; }"			\
	    -e "/^\[$CURRENT_NODE]/,/^\[/ { /^;WEST\s*=/d; }"			\
	    -e "/^\[$CURRENT_NODE]/a\\
\\
;NORTH = password_1,transmit\\
;SOUTH = Password_2,transmit\\
;EAST = password_3,nodeemp\\
;WEST = Password_4,transmit,noplfilter
"										$CONFIG_DIR/voter.conf

    TEMPLATE_EDIT_END	$CONFIG_DIR/voter.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf $CONFIG_DIR/voter.conf

    AST_RECONFIG=1
    AST_RESTART=1
}

do_node_set_pseudo() {
    echo "doing do_set_pseudo" >>$logfile

    if [ "$CURRENT_INTERFACE_TYPE" = "Pseudo" ]; then
	return
    fi

    # Set [node] rxchannel
    do_set_rxchannel "dahdi/pseudo"

    # Update modules
    do_update_chan_modules

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf

    AST_RECONFIG=1
    AST_RESTART=1
}

do_node_set_usrp() {
    echo "doing do_node_set_usrp" >>$logfile

    if [ "$CURRENT_INTERFACE_TYPE" = "USRP" ]; then
	return
    fi

    # Set [node] rxchannel
    do_set_rxchannel "USRP/127.0.0.1:34001:32001"

    # Update modules
    do_update_chan_modules

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf

    AST_RECONFIG=1
    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

get_ami_settings () {
    #sed removes all before = and any after ;
    CURRENT_AMI_SECRET=$(grep '^secret\s*=\s*' $CONFIG_DIR/manager.conf			\
	| tail -1									\
	| sed 's/^secret\s*=\s*//;s/\s*;.*$//')

}

get_iax_settings () {
    # get up the bind  port
    CURRENT_BINDPORT=$(grep '^bindport\s*=\s*' $CONFIG_DIR/iax.conf					\
	| sed 's/^bindport\s*=\s*//;s/\s*;.*$//')
    if [[ -z "$CURRENT_BINDPORT" ]]; then
	CURRENT_BINDPORT=4569
    fi
}

get_node_settings () {
    # collect info for [CURRENT_NODE]

    CURRENT_CALLSIGN=""
    CURRENT_DUPLEX=""
    CURRENT_INTERFACE=""
    CURRENT_INTERFACE_TYPE=""
    CURRENT_PASSWORD=""
    CURRENT_STATPOST="No"

    CURRENT_HANGTIME="5000"
    CURRENT_LINKTOLINK="no"
    CURRENT_WAIT_TIMES="wait-times"

    AWK_TMP=$(mktemp)

    awk	"BEGIN			{ p=0; }
	 /^[ 	]*;/		{ next; }
	 /^$/			{ next; }
	 /^\[node-main]/	{ p=1; next; }
	 /^\[${CURRENT_NODE}]/	{ p=1; next; }
	 /^\[/			{ p=0; }
	 p==1			{ print; }
	"			"${CONFIG_DIR}/rpt.conf"	\
    | sed -e 's/[ 	]*;.*//'				\
	  -e 's/[ 	]*\([^ 	]*\)=[ 	]*\(.*\)/\1	\2/'	\
    > $AWK_TMP

    while read key value
    do
	case "$key" in
	    "idrecording" )
		CURRENT_CALLSIGN=$(echo $value | sed 's/.*|i\([0-9a-zA-Z/-]*\).*/\1/')
		;;
	    "duplex" )
		CURRENT_DUPLEX=$value
		;;
	    "rxchannel" )
		RXCHANNEL=$(echo $value | sed 's/^rxchannel\s*=\s*//; s/\s*; .*$//')
		case "$RXCHANNEL" in
		    SimpleUSB/* )
			CURRENT_INTERFACE="SimpleUSB"
			CURRENT_INTERFACE_TYPE="SimpleUSB"
			;;
		    Radio/* )
			CURRENT_INTERFACE="USBRadio"
			CURRENT_INTERFACE_TYPE="USBRadio"
			;;
		    Voter/* )
			CURRENT_INTERFACE="Voter"
			CURRENT_INTERFACE_TYPE="Voter"
			;;
		    dahdi/pseudo )
			CURRENT_INTERFACE="No radio interface or HUB node"
			CURRENT_INTERFACE_TYPE="Pseudo"
			;;
		    USRP/* )
			CURRENT_INTERFACE="USRP"
			CURRENT_INTERFACE_TYPE="USRP"
			;;
		esac
		;;
	    "statpost_url" )
		CURRENT_STATPOST="Yes"
		;;
	    "hangtime" )
		CURRENT_HANGTIME=$value
		;;
	    "linktolink" )
		CURRENT_LINKTOLINK=$value
		;;
	    "wait_times" )
		CURRENT_WAIT_TIMES=$value
		;;
	    * )
		;;
	esac
    done < $AWK_TMP

    rm $AWK_TMP

    # and pick up the node password
    CURRENT_PASSWORD=$(grep "^register.*=>*\s*${CURRENT_NODE}:" $CONFIG_DIR/rpt_http_registrations.conf	\
	| sed 's/.*:\(.*\)@.*/\1/')
    if [[ -z "$CURRENT_PASSWORD" ]]; then
	CURRENT_PASSWORD='=Not Set='
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

get_allow_block_settings () {
    CURRENT_NODE_ACCESS="Open"
    COUNT=$($ASTERISK -r -x "database show %list/${CURRENT_NODE}/%" | awk '/ results found/ { print $1 }')
    if [[ $COUNT -ne 0 ]]; then
	CURRENT_NODE_ACCESS="Restricted"
    fi
}

do_limit_nodes_add() {
    ACTION="$1"		# "allow" or "block"
    echo "do_limit_nodes_add ($ACTION)" >>$logfile

    while true; do
	calc_wt_size

	ANSWER=$(whiptail					\
		    --title "$TITLE"				\
		    --inputbox "Enter node number to $ACTION"	\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH		\
		    ""						\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return
	fi

	re=^[0-9]\+$
	if [[ $ANSWER =~ $re ]]; then
	    break
	fi

	whiptail --msgbox "Please enter a valid node number, usually 4 or more digits." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    done

    case "$ACTION" in
	"allow" )
	    $ASTERISK -r -x "database put allowlist/$CURRENT_NODE $ANSWER \"allow node $ANSWER to connect to node $CURRENT_NODE\""
	    ;;
	"block" )
	    $ASTERISK -r -x "database put denylist/$CURRENT_NODE  $ANSWER \"block node $ANSWER from connecting to node $CURRENT_NODE\""
	    ;;
    esac

    return
}

do_limit_nodes_remove() {
    ACTION="$1"		# "allow" or "block"
    echo "do_limit_nodes_remove ($ACTION)" >>$logfile

    while true; do
	calc_wt_size

	ANSWER=$(whiptail							\
		    --title "$TITLE"						\
		    --inputbox "Node number to remove from the $ACTION list:"	\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH				\
		    ""								\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return
	fi

	re=^[0-9]\+$
	if [[ $ANSWER =~ $re ]]; then
	    LIMIT_NODE=$ANSWER
	    break
	fi

	whiptail --msgbox "Please enter a valid node number, usually 4 or more digits." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    done

    case "$ACTION" in
	"allow" )
	    $ASTERISK -r -x "database del allowlist/$CURRENT_NODE $LIMIT_NODE"
	    ;;
	"block" )
	    $ASTERISK -r -x "database del denylist/$CURRENT_NODE $LIMIT_NODE"
	    ;;
    esac

    return
}

do_limit_nodes_remove_all() {
    ACTION="$1"		# "allow" or "block"
    echo "do_limit_nodes_remove_all ($ACTION)" >>$logfile

    case "$ACTION" in
	"allow" )
	    $ASTERISK -r -x "database deltree allowlist $CURRENT_NODE"
	    ;;
	"block" )
	    $ASTERISK -r -x "database deltree denylist $CURRENT_NODE"
	    ;;
    esac

    return
}

do_update_allow_block_lists() {
    echo "do_update_allow_block_lists" >>$logfile

    while true; do
	calc_wt_size

	# get allow/block list
	ALLOW_BLOCK_LIST=( `$ASTERISK -r -x "database show %list/${CURRENT_NODE}/%"	\
			   | awk '/ results found/ { next; }	\
				  { print $1; next; }		\
				 '				\
			  `					\
			 )
	#echo "ALLOW_BLOCK_LIST(${#ALLOW_BLOCK_LIST[@]}) = ${ALLOW_BLOCK_LIST[@]}"

	if [[ ${#ALLOW_BLOCK_LIST[@]} -eq 0 ]]; then

	    read -r -d '' LIMIT_TEXT << EOT
Connections to this node can be limited by providing a list of nodes that are "allowed" to connect OR a list of nodes that are "blocked" from connecting.

Would you like to limit access to node $CURRENT_NODE?
EOT
	    whiptail					\
		--title "$TITLE"			\
		--yesno					\
		--defaultno				\
		"${LIMIT_TEXT}"				\
		${WT_HEIGHT} ${WT_WIDTH}
	    ANSWER=$?
	    if [ "${ANSWER}" != "0" ]; then
		break
	    fi

	    ANSWER=$(whiptail						\
			--title "$TITLE"				\
			--menu "AllStar Node Limit Connections Menu"	\
			$WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT		\
			--ok-button "Select"				\
			--cancel-button "Back"				\
			"1" "Limit connections to specific nodes"	\
			"2" "Block connections from specific nodes"	\
			3>&1 1>&2 2>&3)
	    if [[ $? -ne 0 ]]; then
		break
	    fi

	    case "$ANSWER" in
		1) do_limit_nodes_add "allow"	;;
		2) do_limit_nodes_add "block"	;;
		*) whiptail --msgbox "$ANSWER is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH
		   ;;
	    esac

	else

	    allowlist=()
	    blocklist=()
	    for e in ${ALLOW_BLOCK_LIST[@]}; do
	        node=$(echo $e | awk -F/ '{ print $4 }')
	        case "$e" in
		    /allowlist/${CURRENT_NODE}/* )
			allowlist+=("$node")
			;;
		    /denylist/${CURRENT_NODE}/*  )
			blocklist+=("$node")
			;;
		    * )
			echo "Unexpected per-node database value (\"$e\")"
			;;
	        esac
	    done
	    #echo "allowlist(${#allowlist[@]}) = ${allowlist[@]}"
	    #echo "blocklist(${#blocklist[@]}) = ${blocklist[@]}"

	    if [[ ${#allowlist[@]} -gt 0 ]]; then
		ACTION="allow"
		LIMIT_TYPE="allowed"
		MENU_TITLE="AllStar Node Allowed Connections Menu"
		read -r -d '' LIMIT_TEXT << EOT
Connections to node $CURRENT_NODE are currently limited to the following nodes :

${allowlist[@]}

Would you like to change the list of allowed nodes?
EOT
	    else
		ACTION="block"
		LIMIT_TYPE="blocked"
		MENU_TITLE="AllStar Node Blocked Connections Menu"
		read -r -d '' LIMIT_TEXT << EOT
All connections to node $CURRENT_NODE are allowed except for the following nodes :

${blocklist[@]}

Would you like to change the list of blocked nodes?
EOT
	    fi

	    whiptail					\
		--title "$TITLE"			\
		--yesno					\
		--defaultno				\
		"${LIMIT_TEXT}"				\
		${WT_HEIGHT} ${WT_WIDTH}
	    ANSWER=$?
	    if [ "${ANSWER}" != "0" ]; then
		break
	    fi

	    ANSWER=$(whiptail						\
			--title "$TITLE"				\
			--menu "$MENU_TITLE"				\
			$WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT		\
			--ok-button "Select"				\
			--cancel-button "Back"				\
			"A" "Add node to be $LIMIT_TYPE"		\
			"R" "Remove $LIMIT_TYPE node"			\
			"X" "Remove all $LIMIT_TYPE nodes"		\
			3>&1 1>&2 2>&3)
	    if [[ $? -ne 0 ]]; then
		break
	    fi

	    case "$ANSWER" in
		A) do_limit_nodes_add        $ACTION	;;
		R) do_limit_nodes_remove     $ACTION	;;
		X) do_limit_nodes_remove_all $ACTION	;;
		*) whiptail --msgbox "$ANSWER is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH
		   ;;
	    esac
	fi
    done

    get_allow_block_settings
    return
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_interface_tune_cli() {
    echo "doing do_interface_tune_cli" >>$logfile

    # check if tuning available for this interface
    case "$CURRENT_INTERFACE_TYPE" in
	"SimpleUSB" )
	    ;;
	"USBRadio" )
	    ;;
	"Pseudo" )
	    whiptail										\
		--title "$TITLE"								\
		--msgbox "No tuning is needed for this node."					\
		$MSGBOX_HEIGHT $MSGBOX_WIDTH
	    return
	    ;;
	* )
	    whiptail										\
		--title "$TITLE"								\
		--msgbox "Tuning \"$CURRENT_INTERFACE_TYPE\" is not supported. Use editor."	\
		$MSGBOX_HEIGHT $MSGBOX_WIDTH
	    return
	    ;;
    esac

    # check if Asterisk needs to be restarted
    if [ $AST_RECONFIG -eq 1 ]; then
	whiptail											\
	    --title "$TITLE"										\
	    --yesno											\
	    "Asterisk must be restarted before you can tune this interface.\n\nRestart Asterisk now?"	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
	if [ $? -ne 0 ]; then #no
	    return
	fi

	do_astres
	if [ $AST_RECONFIG -eq 1 ]; then
	    # Asterisk restart failed, do not tune
	    return
	fi
	sleep 2
    fi

    # tune the interface
    case "$CURRENT_INTERFACE_TYPE" in
	"SimpleUSB" )
	    clear
	    /usr/sbin/simpleusb-tune-menu
	    RC=$?
	    clear
	    if [[ $RC -ne 0 ]]; then
		whiptail									\
		    --title "$TITLE"								\
		    --msgbox "SimpleUSB tuning CLI did not launch. Try restarting Asterisk."	\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH
	    fi
	    ;;
	"USBRadio" )
	    clear
	    /usr/sbin/radio-tune-menu
	    RC=$?
	    clear
	    if [[ $RC -ne 0 ]]; then
		whiptail									\
		    --title "$TITLE"								\
		    --msgbox "USB Radio tuning CLI did not launch. Try restarting Asterisk."	\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH
	    fi
	    ;;
	* )
	    ;;
    esac

    NEED_TUNE=0
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_node_setup_menu_info() {
    read -r -d '' text << EOT
Node Setup Menu Instructions

For new nodes you should choose values for each one of these items.

1 The node number (assigned by AllStarLink.org)
2 The node password that corresponds with your node number. The node number and password is how your node connects to the AllStarLink network.
3 Your ham radio call sign.
4 The type of radio interface. Most often you will use "SimpleUSB".
5 The duplex will be explained when selected. Most often you will set it to "1".
6 Send statistics (yes or no) to "stats.allstarlink.org". This allows you and others to see the status and connections of your node including the location on a map.
7 This selection allows you to limit connections to your node.
8 This selection allows you to tune your "SimpleUSB" and "USBRadio" interfaces.

These settings will go into effect when Asterisk is restarted.

For help see https://community.allstarlink.org
EOT
    whiptail --title "$TITLE" --scrolltext --msgbox "$text" $WT_HEIGHT $WT_WIDTH
}

do_allstar_node_setup_menu() {
    echo "do_allstar_node_setup_menu" >>$logfile

    DEFAULT_ITEM=0

    get_allow_block_settings

    while true; do
	calc_wt_size
	get_node_settings

	DISPLAY_CALLSIGN="$CURRENT_CALLSIGN"
	if [[ "$CURRENT_CALLSIGN" = "NOTSET" ]]; then
	    DISPLAY_CALLSIGN="*** Not Set ***     <--"
	fi

	DISPLAY_PASSWORD="$CURRENT_PASSWORD"
	if [[ "$CURRENT_PASSWORD" = "=Not Set=" ]]; then
	    if [[ $CURRENT_NODE -ge 2000 ]]; then
		DISPLAY_PASSWORD="*** Not Set ***     <--"
	    else
		DISPLAY_PASSWORD=""
	    fi
	fi

	DISPLAY_TUNE=""
	if [[ $NEED_TUNE -ne 0 ]]; then
	    DISPLAY_TUNE="                    <--"
	fi

	CHOICE=$(whiptail					\
		    --title "$TITLE"				\
		    --default-item=$DEFAULT_ITEM		\
		    --menu "AllStar Node Setup Menu"		\
		    $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT	\
		    --ok-button "Select"			\
		    --cancel-button "Back"			\
	    "1" "Node number      : $CURRENT_NODE"		\
	    "2" "Node password    : $DISPLAY_PASSWORD"		\
	    "3" "Node callsign    : $DISPLAY_CALLSIGN"		\
	    "4" "Radio interface  : $CURRENT_INTERFACE"		\
	    "5" "Duplex type      : $CURRENT_DUPLEX"		\
	    "6" "Post node status : $CURRENT_STATPOST"		\
	    "7" "Node access list : $CURRENT_NODE_ACCESS"	\
	    "8" "Interface Tune CLI $DISPLAY_TUNE"		\
	    "I" "Node Setup Menu Instructions"			\
	    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    NEED_TUNE=0
	    return
	fi

	case "$CHOICE" in
	    1)	do_update_node_number
		;;
	    2)	do_update_node_password
		;;
	    3)	do_update_node_callsign
		;;
	    4)	do_update_node_interface
		;;
	    5)	do_update_node_duplex
		;;
	    6)	do_update_node_statpost
		;;
	    7)	do_update_allow_block_lists
		;;
	    8)	do_interface_tune_cli
		;;
	    I)	do_node_setup_menu_info
		;;
	    *)	whiptail --msgbox "$CHOICE is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH
		continue
		;;
	esac

	DEFAULT_ITEM=$CHOICE
    done

    NEED_TUNE=0
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_query_node_defaults() {
    echo "do_query_node_defaults" >>$logfile

    CURRENT_PASSWORD="=Not Set="
    if [[ $CURRENT_NODE -ge 2000 ]]; then
	do_query_node_password
	if [[ $? -ne 0 ]]; then
	    return 1
	fi

	NEW_PASSWORD=$ANSWER
    else
	NEW_PASSWORD=""
    fi

    NEW_INTERFACE_TYPE=""
    NEW_DUPLEX=""
    NEW_LINKTOLINK=$CURRENT_LINKTOLINK

    ANSWER=$(whiptail									\
		--title "$TITLE"							\
		--menu "What configuration settings should we use for node $CURRENT_NODE?"	\
		$WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT					\
		--ok-button "Select"							\
		"1" "Hotspot (half duplex) with courtesy tones"				\
		"2" "Hotspot (half duplex) with no courtesy tones"			\
		"3" "Repeater or full duplex hotspot"					\
		"4" "HUB w/no radio"							\
		"0" "None of the above (show all settings)"				\
		3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
	return 1
    fi

    case "$ANSWER" in
	1)  # Hotspot (half duplex) with courtesy tones
	    NEW_INTERFACE_TYPE="SimpleUSB"
	    NEW_DUPLEX=1
	    ;;
	2)  # Hotspot (half duplex) with no courtesy tones
	    NEW_INTERFACE_TYPE="SimpleUSB"
	    NEW_DUPLEX=0
	    ;;
	3)  # Repeater or full duplex hotspot
	    NEW_INTERFACE_TYPE="SimpleUSB"
	    NEW_DUPLEX=2
	    ;;
	4)  # Hub w/no radio
	    NEW_INTERFACE_TYPE="Pseudo"
	    NEW_DUPLEX=2
	    ;;
	0)  # Use [node] default settings
	    ;;
	*)  whiptail --msgbox "$ANSWER is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	    ;;
    esac

    case "$ANSWER" in
	1 | 2 | 3)
	    do_query_node_interface short
	    if [[ $? -ne 0 ]]; then
		return 1
	    fi

	    NEW_INTERFACE_TYPE="$ANSWER"
	    ;;
    esac

    if [[ -n "$NEW_INTERFACE_TYPE" ]]; then
	CURRENT_CALLSIGN="NOTSET"
	do_query_node_callsign
	if [[ $? -ne 0 ]]; then
	    return 1
	fi

	NEW_CALLSIGN="${ANSWER^^}"
    fi

    return 0
}

do_node_set_defaults() {
    echo "do_node_set_defaults" >>$logfile

    if [[ -n "$NEW_INTERFACE_TYPE" ]]; then
	CURRENT_INTERFACE_TYPE="?"
	case "$NEW_INTERFACE_TYPE" in
	    "SimpleUSB" )
		do_node_set_simpleusb
		;;
	    "USBRadio" )
		do_node_set_usbradio
		;;
	    "Voter" )
		do_node_set_voter
		;;
	    "Pseudo" )
		do_node_set_pseudo
		;;
	    "USRP" )
		do_node_set_usrp
		;;
	esac
    fi

    if [[ -n "$NEW_DUPLEX" ]]; then
	do_set_duplex
    fi

    if [[ $CURRENT_PASSWORD != $NEW_PASSWORD ]]; then
	do_node_set_password
    fi

    if [[ $CURRENT_CALLSIGN != $NEW_CALLSIGN ]]; then
	do_node_set_callsign
    fi

    if [[ -n "$NEW_INTERFACE_TYPE$NEW_DUPLEX" ]]; then
	if [[ $CURRENT_NODE -ge 2000 ]]; then
	    NEW_STATPOST="Yes"
	    do_set_statpost
	fi
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_node_add_registration() {
    echo "do_node_add_registration" >>$logfile

    if [[ "$CURRENT_PASSWORD" = "=Not Set=" ]]; then
	CURRENT_PASSWORD=""
    fi

    TEMPLATE_EDIT_START $CONFIG_DIR/rpt_http_registrations.conf
	# add the registration
	ex $CONFIG_DIR/rpt_http_registrations.conf		<<_END_OF_INPUT
/^\[registrations]
/^\[
i
register => ${CURRENT_NODE}:${CURRENT_PASSWORD}@register.allstarlink.org

.
:wq
_END_OF_INPUT
    TEMPLATE_EDIT_END $CONFIG_DIR/rpt_http_registrations.conf
}

do_node_remove_registration() {
    echo "do_node_remove_registration" >>$logfile

    TEMPLATE_EDIT_START $CONFIG_DIR/rpt_http_registrations.conf
	# remove the per-node registration
	sed -i -e "/^\[registrations]/,/^\[/ { /^register\s*=>\s*${REM_NODE}/d; }"	\
								$CONFIG_DIR/rpt_http_registrations.conf
    TEMPLATE_EDIT_END $CONFIG_DIR/rpt_http_registrations.conf
}

do_node_add() {
    echo "do_node_add" >>$logfile

    do_query_node_number add
    if [[ $? -ne 0 ]]; then
	return
    fi

    CURRENT_NODE=$ANSWER

    if [[ $ANSWER -ge 2000 ]]; then
	CURRENT_PASSWORD="abcdef"
    else
	CURRENT_PASSWORD=""
    fi

    do_query_node_defaults
    if [[ $? -ne 0 ]]; then
	return
    fi

    TEMPLATE_EDIT_START $CONFIG_DIR/rpt.conf
	# add the per-node category
	TEMPLATE_CATEGORY_ADD "${CURRENT_NODE}" "node-main"	$CONFIG_DIR/rpt.conf

	# ... and update [nodes]
	ex $CONFIG_DIR/rpt.conf					<<_END_OF_INPUT
/^\[nodes]
/^\[
i
${CURRENT_NODE} = radio@127.0.0.1/${CURRENT_NODE},NONE

.
:wq
_END_OF_INPUT

	# ... and ensure that the new node has the current bindport
	get_iax_settings
	sed -i							\
	    -E							\
	    -e "/^${CURRENT_NODE}\s*=\s*radio@/			\
		{						\
		    s/:[0-9]+\//\//;				\
		    s/\//:$CURRENT_BINDPORT\//;			\
		    s/:4569\//\//				\
		}"						$CONFIG_DIR/rpt.conf

    TEMPLATE_EDIT_END $CONFIG_DIR/rpt.conf

    if [[ -z "$NEW_INTERFACE_TYPE$NEW_DUPLEX" ]]; then
	# if using [node-main] template
	do_update_chan_modules
    else
	# if using "selected" defaults
	do_node_set_defaults
    fi

    if [[ $CURRENT_NODE -ge 2000 ]]; then
	do_node_add_registration
    fi

    update_file_permissions			\
	$CONFIG_DIR/modules.conf		\
	$CONFIG_DIR/rpt.conf			\
	$CONFIG_DIR/rpt_http_registrations.conf

    AST_RECONFIG=1
    AST_RESTART=1

    if [[ -n "$NEW_INTERFACE_TYPE$NEW_DUPLEX" ]]; then
	if [[ $INTERFACE_SELECTION_SKIPPED -eq 0 ]]; then
	    case "$NEW_INTERFACE_TYPE" in
		"SimpleUSB" | "USBRadio" )
		    do_interface_tune_cli
		    ;;
	    esac
	    return
	fi
    fi

    # ... and let's setup the new node too!
    do_allstar_node_setup_menu
}

do_node_remove() {
    echo "do_node_remove" >>$logfile

    while true; do
	calc_wt_size

	ANSWER=$(whiptail					\
		    --title "$TITLE"				\
		    --inputbox "Enter node number to remove :"	\
		    $MSGBOX_HEIGHT $MSGBOX_WIDTH		\
		    ""						\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return
	fi

	re=^[0-9]\+$
	if ! [[ $ANSWER =~ $re ]]; then
	    whiptail --msgbox "Please enter a valid node number, usually 4 or more digits." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	elif [[ ! ${nodes[@]} =~ $ANSWER ]]; then
	    whiptail --msgbox "There is no configuration for node number \"$ANSWER\", please choose another." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	else
	    REM_NODE=$ANSWER
	    break
	fi
    done

    TEMPLATE_EDIT_START $CONFIG_DIR/rpt.conf
	# remove the per-node category
	TEMPLATE_CATEGORY_REMOVE "${REM_NODE}"			$CONFIG_DIR/rpt.conf

	# ... and update [nodes]
	sed -i -e "/^\[nodes]/,/^\[/ { /^${REM_NODE}\s*=/d }"	$CONFIG_DIR/rpt.conf
    TEMPLATE_EDIT_END $CONFIG_DIR/rpt.conf

    do_node_remove_registration

    # Remove the [node] from the SimpleUSB configuration
    TEMPLATE_EDIT_START	$CONFIG_DIR/simpleusb.conf
	TEMPLATE_CATEGORY_REMOVE "${REM_NODE}"			$CONFIG_DIR/simpleusb.conf
    TEMPLATE_EDIT_END	$CONFIG_DIR/simpleusb.conf

    # Remove the [node] from the USBRadio configuration
    TEMPLATE_EDIT_START	$CONFIG_DIR/usbradio.conf
	TEMPLATE_CATEGORY_REMOVE "${REM_NODE}"			$CONFIG_DIR/usbradio.conf
    TEMPLATE_EDIT_END	$CONFIG_DIR/usbradio.conf

    # Remove the [node] from the Voter configuration
    TEMPLATE_EDIT_START	$CONFIG_DIR/voter.conf
	TEMPLATE_CATEGORY_REMOVE "${REM_NODE}"			$CONFIG_DIR/voter.conf
    TEMPLATE_EDIT_END	$CONFIG_DIR/voter.conf

    # Update modules
    do_update_chan_modules

    update_file_permissions			\
	$CONFIG_DIR/modules.conf		\
	$CONFIG_DIR/rpt.conf			\
	$CONFIG_DIR/rpt_http_registrations.conf	\
	$CONFIG_DIR/simpleusb.conf		\
	$CONFIG_DIR/usbradio.conf		\
	$CONFIG_DIR/voter.conf

    AST_RESTART=1
}

do_allstar_node_select_menu() {
    echo "do_allstar_node_select_menu" >>$logfile

    DEFAULT_ITEM=1

    while true; do
	calc_wt_size

	# get node list
	nodes=( `grep "^\[[0-9][0-9]*]" $CONFIG_DIR/rpt.conf | sed -e 's/^\[//' -e 's/].*//'` )
	#echo "nodes = ${nodes[*]}"
	#echo "    # = ${#nodes[@]}"

	if [ ${#nodes[@]} -eq 1 -a "${nodes[0]}" = "1999" ]; then
	    # if we only have the [template] node
	    CURRENT_NODE="${nodes[0]}"

	    # check if the [template] node has been updated
	    get_node_settings
	    if [[ "$CURRENT_PASSWORD" = "=Not Set=" && $CURRENT_CALLSIGN = "NOTSET" ]]; then
		# if not [yet] modified

		do_query_node_number first
		if [[ $? -ne 0 ]]; then
		    return
		fi

		SAVE_NODE=$CURRENT_NODE
		CURRENT_NODE=$ANSWER

		do_query_node_defaults
		if [[ $? -ne 0 ]]; then
		    return
		fi

		if [[ $SAVE_NODE != $CURRENT_NODE ]]; then
		    NEW_NODE=$CURRENT_NODE
		    CURRENT_NODE=$SAVE_NODE
		    do_node_rename
		    CURRENT_NODE=$NEW_NODE
		    get_node_settings
		fi

		if [[ $ANSWER -ge 2000 ]]; then
		    CURRENT_PASSWORD="abcdef"
		else
		    CURRENT_PASSWORD=""
		fi

		if [[ -n "$NEW_INTERFACE_TYPE$NEW_DUPLEX" ]]; then
		    # apply the defaults for the selected type
		    do_node_set_defaults

		    if [[ $INTERFACE_SELECTION_SKIPPED -eq 0 ]]; then
			case "$NEW_INTERFACE_TYPE" in
			    "SimpleUSB" | "USBRadio" )
				do_interface_tune_cli
				;;
			esac
			return
		    fi
		fi

		# show the initial node
		do_allstar_node_setup_menu
		return
	    fi
	fi

	# build menu selection for the nodes
	newarr=()
	for i in ${!nodes[@]}; do
	    newarr+=("$((i + 1))" "Update node ${nodes[$i]}")
	done

	if [[ ${#newarr[@]} -eq 0 ]]; then
	    DEFAULT_ITEM="A"
	fi

	CHOICE=$(whiptail					\
		    --title "$TITLE"				\
		    --default-item $DEFAULT_ITEM		\
		    --menu "AllStar Node Select Menu"		\
		    $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT	\
		    --ok-button "Select"			\
		    --cancel-button "Back"			\
		    "A" "Add Node"				\
		    "R" "Remove Node"				\
		    "${newarr[@]}"				\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    return
	fi

	re=^[0-9]\+$
	if [[ $CHOICE =~ $re ]]; then
	    CURRENT_NODE="${nodes[$((CHOICE - 1))]}"
	    do_allstar_node_setup_menu
	    DEFAULT_ITEM=$CHOICE
	    continue
	fi

	case "$CHOICE" in
	    A)	do_node_add
		CHOICE=${#nodes[@]}
		;;
	    R)	do_node_remove
		;;
	    *)	whiptail --msgbox "$CHOICE is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH
		;;
	esac

	DEFAULT_ITEM=$CHOICE
    done
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_main_menu_info() {
    read -r -d '' text << EOT
Node Setup Main Menu Instructions

Use arrow keys to scroll, TAB to select <Ok> and then press enter to close these instructions.

Menu item "1" is where you'll configure most of the basic settings for your AllStar node. For servers with more than one node or advanced settings you'll need to use an editor/sftp client such as WinSCP.  But don't worry, everything you need to get your node on the air is here.

Before changing any settings you should make a copy of the current configuration with the backup/restore menu, item "B".  If something goes wrong you can restore the configuration using the backup menu.

Changes will go into effect once Asterisk is restarted with menu item "2".

Menu item "3" allows you to change the Asterisk Management Interface (AMI) password.  The AMI password is used to update the configuration.  AMI is also allows other web applications (e.g. Allmon, Supermon, etc) to monitor and control your node from a browser.

Menu item "4" allows you to change the Asterisk server's IAX port.  This UDP port is used by other nodes to connect to your server.  The default port is 4569.

If this is a new setup, you should do all of item "1" and then do menu item "2"". That should be all that is needed to get your node up and running.

For help see https://community.allstarlink.org
EOT
    whiptail --title "$TITLE" --scrolltext --msgbox "$text" $WT_HEIGHT $WT_WIDTH
}

do_main_menu() {
    echo "do_main_menu" >>$logfile

    while true; do
	calc_wt_size

	NEED_RESTART=""
	if [[ $AST_RESTART -ne 0 ]]; then
	    NEED_RESTART="<-- Needed"
	fi

	LABEL_CANCEL="Exit"
	if [[ $SUB_MENU -ne 0 ]]; then
	    LABEL_CANCEL="Back"
	fi

	ANSWER=$(whiptail						\
		    --title "$TITLE"					\
		    --menu "Node Setup Main Menu"			\
		    $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT		\
		    --ok-button "Select"				\
		    --cancel-button "$LABEL_CANCEL"			\
		    "1" "AllStar Node Setup Menu"			\
		    "2" "Restart Asterisk         $NEED_RESTART"	\
		    "3" "Update Asterisk AMI password"			\
		    "4" "Update Asterisk IAX port"			\
		    "B" "Backup and Restore Menu"			\
		    "I" "Main Menu Instructions"			\
		    3>&1 1>&2 2>&3)
	if [[ $? -ne 0 ]]; then
	    do_exit
	    continue
	fi

	case "$ANSWER" in
	    1)	do_allstar_node_select_menu
		;;
	    2)	do_astres
		;;
	    3)	do_update_ami_secret
		;;
	    4)	do_update_iax_bindport
		;;
	    B)	do_backup_restore_menu
		;;
	    I)	do_main_menu_info
		;;
	    *)	whiptail --msgbox "$ANSWER is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH
		;;
	esac
    done
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_exit() {
    echo "doing do_exit" >>$logfile

    if [[ $ASL_UPDATED -ne 0 ]]; then
	sync
	ASL_UPDATED=0
    fi

    if [[ $AST_RESTART -ne 0 ]]; then
	whiptail				\
	    --title "$TITLE"			\
	    --yesno "Asterisk must be restarted to make your changes active.\n\nAre you sure you want to exit now?"	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
	if [[ $? -eq 0 || $? -eq 255 ]]; then
	    exit 0
	fi
    else
	exit 0
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

while [[ $# -gt 0 ]]; do
    case "$1" in
	"--debug" )
	    ASL_DEBUG="--debug"
	    logfile=/tmp/node-setup.log
	    shift
	    ;;

	"--sub-menu" )
	    SUB_MENU=1
	    shift
	    ;;

	* )
	    echo "Usage: $0 [ --debug ] [ --sub-menu ]"
	    exit 1
    esac
done

/usr/bin/clear
check_if_root
check_configuration
do_main_menu
