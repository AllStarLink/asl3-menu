#!/bin/bash
#
# AllStarLink Asterisk configure script
# by N8THN Feb. 012, 2018
# VERSION 1.90
# release date 20180323-1
# Major rework by WD6AWP April 2021
# ASL3 rework/updates by WA3WCO Jan 2024

AST_RESTART=0
BACKUP_DIR="${DESTDIR}/var/asl-backups"
CONFIG_DIR="${DESTDIR}/etc/asterisk"

MSGBOX_HEIGHT=12
MSGBOX_WIDTH=60
TITLE="AllStarLink 3.0.0"

#logfile=/dev/null
logfile=/tmp/node-setup.log

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

check_if_root() {
    if [[ $EUID != 0 ]]; then
	whiptail --msgbox "This script must be run as root or with sudo" $MSGBOX_HEIGHT $MSGBOX_WIDTH
	exit 1
    fi
}

check_configuration() {
    if [[ ! -f $CONFIG_DIR/rpt.conf ]]; then
	whiptail --msgbox "Expected configuration files not found in \"$CONFIG_DIR\" directory" $MSGBOX_HEIGHT $MSGBOX_WIDTH
	exit 1
    fi
}

update_file_permissions() {
    ASTERISK_USER=$(stat --format="%U" "$CONFIG_DIR")
    chown $ASTERISK_USER $*
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

calc_wt_size() {
    echo "doing calc_wt_size" >>$logfile

    # Bash knows the terminal size
    #   The number of columns are $COLUMNS
    #   The number of lines are $LINES

    if [[ $LINES -lt 22 ]]; then
        echo "Terminal size must be at least 22 lines."
        exit 1
    fi
    if [[ $COLUMNS -lt 60 ]]; then
        echo "Terminal size must be at least 60 columns."
        exit 1
    fi

    WT_HEIGHT=22

    # Leave full width up to 100 columns
    WT_WIDTH=$COLUMNS
    if [[ $COLUMNS -gt 100 ]]; then
        WT_WIDTH=100
    fi

    WT_MENU_HEIGHT=$(($WT_HEIGHT - 8))
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_local_conf_backup() {
    echo "do_local_conf_backup" >>$logfile

    BACKUP_NAME=$(date +ASL_%Y-%m-%d_%H%M.tgz)

    whiptail										\
	--title "$TITLE"								\
	--yesno "Save local backup to \"$BACKUP_NAME\"?"				\
	$MSGBOX_HEIGHT $MSGBOX_WIDTH
    if [[ $? -eq 0 ]]; then
        if [[ ! -d "$BACKUP_DIR" ]]; then
            mkdir -p "$BACKUP_DIR"
        fi
        ( cd /										\
	; tar czf "$BACKUP_DIR/$BACKUP_NAME" --exclude='*.tgz' etc/asterisk >/dev/null	\
        ; chmod go+r "$BACKUP_DIR/$BACKUP_NAME"						\
	)
        whiptail									\
	    --msgbox "Backup \"$BACKUP_DIR/$BACKUP_NAME\" complete."			\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_local_conf_restore() {
    calc_wt_size
    echo "do_local_conf_restore" >>$logfile

    # build array of /etc/asterisk/*.tgz files
    shopt -s nullglob
    filearr=("$BACKUP_DIR"/*.tgz)
    file_count=${#filearr[@]}
    #echo ${#filearr[@]}
    #echo ${filearr[@]}

    # build array of backups
    if [[ $file_count -eq 0 ]]; then
        whiptail --msgbox "No backups available to restore." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    else
        newarr=()
        for i in ${!filearr[@]}; do
            #set last file to ON (selected)
            if [[ $((i + 1)) -eq ${#filearr[@]} ]]; then
                ONOFF="ON"
            else
                ONOFF="OFF"
            fi
            newarr+=("${filearr[$i]}" "" "$ONOFF")
        done
    fi
    #echo ${newarr[@]}; exit

    # select file for restore
    if [[ $file_count -ne 0 ]]; then
        BACKUP_NAME=$(whiptail					\
			--title "$TITLE"			\
			--radiolist "Select the backup file to restore.\n\nUse the arrow keys to scroll and the space bar to select."	\
			--ok-button "Restore"			\
			$WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT	\
			"${newarr[@]}"				\
			3>&1 1>&2 2>&3)
        if [[ $? = 0 ]]; then
            ( cd /						\
	    ; tar xzf "$BACKUP_NAME"				\
	    )
            AST_RESTART=1
            whiptail --msgbox "The \"$BACKUP_NAME\" backup has been restored." $MSGBOX_HEIGHT $MSGBOX_WIDTH
        fi
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_select_statpost() {
    echo "doing do_rpt_statpost" >>$logfile

    # un/comments the statpost command in rpt.conf
    whiptail								\
	--title "$TITLE"						\
	--yesno "Enabling status posting to AllStarLink.org?"		\
	$MSGBOX_HEIGHT $MSGBOX_WIDTH
    case $? in
	0) sed -i "/^;\s*statpost_url\s*=/ s/;\s*statpost_url/statpost_url/"	$CONFIG_DIR/rpt.conf
	   ;;
	1) sed -i "/^statpost_url\s*=/ s/statpost_url/;statpost_url/"		$CONFIG_DIR/rpt.conf
	   ;;
	*) return
	   ;;
    esac

    update_file_permissions $CONFIG_DIR/rpt.conf
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_select_duplex() {
    echo "doing do_new_duplex" >>$logfile

    # Array of duplex choices
    duplex_modes=(							\
		  "Half duplex with no telemetry (link)"		\
		  "Half duplex with telemetry (hotspot)"		\
		  "Full Duplex with telemetry (repeater)"		\
		  "Full Duplex with telemetry, in cabinet repeat"	\
		  "Full Duplex with telemetry, no repeat w/autopatch"	\
		 )

    newarr=()
    for i in ${!duplex_modes[@]}; do
        if [[ $i -eq $CURRENT_DUPLEX ]]; then
            ONOFF="ON"
        else
            ONOFF="OFF"
        fi
        newarr+=("$i" "${duplex_modes[$i]}" "$ONOFF")
    done
    ((i++))

    ANSWER=$(whiptail								\
		--title "$TITLE"						\
		--radiolist "Select the duplex type.\n\nUse the arrow keys to scroll and the space bar to select."	\
		$WT_HEIGHT $WT_WIDTH						\
		$i								\
		"${newarr[@]}"							\
		3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
        return
    fi

    re=^[0-4]$
    if ! [[ $ANSWER =~ $re ]]; then
	whiptail --msgbox "Duplex type must be a number between 0 and 4." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    elif [[ $ANSWER != $CURRENT_DUPLEX ]]; then
	NEW_DUPLEX=$ANSWER
	do_set_duplex
    fi
}

do_set_duplex() {
    echo "doing do_rpt_duplex" >>$logfile

    sed -i "/^duplex\s*=\s*/s/$CURRENT_DUPLEX/$NEW_DUPLEX/"	$CONFIG_DIR/rpt.conf
    update_file_permissions $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_select_node_number() {
    ANSWER=$(whiptail								\
		--title "$TITLE"						\
		--inputbox "The current node number is $CURRENT_NODE.\n\nEnter new node number :"	\
		$MSGBOX_HEIGHT $MSGBOX_WIDTH					\
		"$CURRENT_NODE"							\
		3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
        return
    fi

    re=^[0-9]\+$
    if ! [[ $ANSWER =~ $re ]]; then
	whiptail --msgbox "The node number must be a number, usually 3 or more digits." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    elif [[ $ANSWER != $CURRENT_NODE ]]; then
	NEW_NODE=$ANSWER
	do_set_node_number
    fi
}

do_set_node_number() {
    echo "doing do_set_node_number" >>$logfile

    # Update appropriate rpt.conf lines
    sed -i "/^\[$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"				$CONFIG_DIR/rpt.conf
    sed -i "/^$CURRENT_NODE\s*=\s*/ s/$CURRENT_NODE/$NEW_NODE/g"			$CONFIG_DIR/rpt.conf
    sed -i "/^rxchannel\s*=.*usb_$CURRENT_NODE\s*/ s/$CURRENT_NODE/$NEW_NODE/"		$CONFIG_DIR/rpt.conf
    sed -i "/^;\s*rxchannel\s*=.*usb_$CURRENT_NODE\s*/ s/$CURRENT_NODE/$NEW_NODE/"	$CONFIG_DIR/rpt.conf
    sed -i "/^rxchannel\s*=\s*Voter\/$CURRENT_NODE\s*/ s/$CURRENT_NODE/$NEW_NODE/"	$CONFIG_DIR/rpt.conf
    sed -i "/^;\s*rxchannel\s*=\s*Voter\/$CURRENT_NODE\s*/ s/$CURRENT_NODE/$NEW_NODE/"	$CONFIG_DIR/rpt.conf

    # Update appropriate extensions.conf lines
    sed -i "/^NODE\s*=\s*[0-9]\+/ s/$CURRENT_NODE/$NEW_NODE/"				$CONFIG_DIR/extensions.conf

    # Update node registration
    #
    # Note:
    # * The template node has a node # of "1234" and not "1999". Fix this first :-)
    # * New nodes will have the register statement commented. Remove it first then change node number.
    #
    sed -i "/register\s*=>\s*1234:abcdef@/ s/1234:/${CURRENT_NODE}:/"		$CONFIG_DIR/rpt_http_registrations.conf
    sed -i "/^;.*register\s*=>\s*${CURRENT_NODE}:/ s/;\s*//"			$CONFIG_DIR/rpt_http_registrations.conf
    sed -i "/^register\s*=>\s*${CURRENT_NODE}:/ s/$CURRENT_NODE/$NEW_NODE/"	$CONFIG_DIR/rpt_http_registrations.conf

    # Update "save-node" configuration
    sed -i "/^NODE\s*=/ s/NODE\s*=.*/NODE=$NEW_NODE/"				$CONFIG_DIR/savenode.conf

    # Update "simpleusb" configuration
    sed -i "/^\[usb_$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"		$CONFIG_DIR/simpleusb.conf

    # Update "usbradio" configuration
    sed -i "/^\[usb_$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"		$CONFIG_DIR/usbradio.conf

    # Update "voter" configuration
    sed -i "/^\[$CURRENT_NODE\]/ s/$CURRENT_NODE/$NEW_NODE/"			$CONFIG_DIR/voter.conf

    update_file_permissions			\
	$CONFIG_DIR/rpt.conf			\
	$CONFIG_DIR/extensions.conf		\
	$CONFIG_DIR/rpt_http_registrations.conf	\
	$CONFIG_DIR/savenode.conf		\
	$CONFIG_DIR/simpleusb.conf		\
	$CONFIG_DIR/usbradio.conf		\
	$CONFIG_DIR/voter.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_select_node_password() {
    if [[ "$CURRENT_PASSWD" == "Not Set" ]]; then
        whiptail											\
	    --title "$TITLE"										\
	    --msgbox "This looks like a new node. Change node number before setting the password."	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
        return
    fi

    ANSWER=$(whiptail											\
		--title "$TITLE"									\
		--inputbox "Enter the password for node $NEW_NODE :"					\
		$MSGBOX_HEIGHT $MSGBOX_WIDTH								\
		"$CURRENT_PASSWD"									\
		3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
        return
    fi

    re=^[0-9a-zA-Z_-]{6,}$
    if ! [[ $ANSWER =~ $re ]]; then
	whiptail											\
	    --msgbox "The node password may only contain letters, numbers, underscore and dash. It must be 6 or more characters in length."	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
    elif [[ "$ANSWER" != "$CURRENT_PASSWD" ]]; then
	NEW_PASSWD=$ANSWER
	do_set_node_password
    fi
}

do_set_node_password() {
    # Update node registration
    #
    # Note:
    # * The template node has a node # of "1234" and not "1999". Fix this first :-)
    # * New nodes will have the register statement commented. Remove it first then change node password.
    #
    sed -i "/register\s*=>\s*1234:abcdef@/ s/1234:/${CURRENT_NODE}:/"		$CONFIG_DIR/rpt_http_registrations.conf
    sed -i "/^;.*register\s*=>\s*${CURRENT_NODE}:/ s/;\s*//"			$CONFIG_DIR/rpt_http_registrations.conf
    sed -i "/^register\s*=>\s*${CURRENT_NODE}:/ s/$CURRENT_PASSWD/$NEW_PASSWD/"	$CONFIG_DIR/rpt_http_registrations.conf

    # Update "save-node" configuration
    sed -i "/^PASSWORD\s*=/ s/PASSWORD\s*=.*/PASSWORD=$NEW_PASSWD/"		$CONFIG_DIR/savenode.conf

    update_file_permissions $CONFIG_DIR/rpt_http_registrations.conf $CONFIG_DIR/savenode.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_select_node_callsign() {
    ANSWER=$(whiptail							\
		--title "$TITLE"					\
		--inputbox "Enter the call sign for node $NEW_NODE :"	\
		$MSGBOX_HEIGHT $MSGBOX_WIDTH				\
		"$CURRENT_CALLSIGN"					\
		3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
        return
    fi

    re=^[0-9A-Z]{3,}$
    if ! [[ $ANSWER =~ $re ]]; then
	whiptail	\
	    --msgbox "A call sign may only uppercase letters and numbers. The call must be 3 or more characters in length."	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
    elif [[ $ANSWER != $CURRENT_CALLSIGN ]]; then
	NEW_CALLSIGN=$ANSWER
	do_set_node_callsign
    fi
}

do_set_node_callsign() {
    # Update callsign (for "ID")
    sed -i "/^idrecording\s*=\s*|i$CURRENT_CALLSIGN/ s/$CURRENT_CALLSIGN/$NEW_CALLSIGN/"	$CONFIG_DIR/rpt.conf
    sed -i "/^idtalkover\s*=\s*|i$CURRENT_CALLSIGN/ s/$CURRENT_CALLSIGN/$NEW_CALLSIGN/"		$CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_select_ami_secret() {
    echo "doing do_select_ami_secret" >>$logfile

    ANSWER=$(whiptail								\
		--title "$TITLE"						\
		--inputbox "Enter the AMI secret for Allmon, Supermon, etc :"	\
		$MSGBOX_HEIGHT $MSGBOX_WIDTH					\
		"$CURRENT_AMI_SECRET"						\
		3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
        return
    fi

    re=^[0-9a-zA-Z_-]{12,}$
    if ! [[ $ANSWER =~ $re ]]; then
	whiptail						\
	    --msgbox "The AMI secret may only contain letters, numbers, underscore and dash. It must be 12 or more characters in length."	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
    elif [[ $ANSWER != $CURRENT_AMI_SECRET ]]; then
	NEW_AMI_SECRET=$ANSWER
	do_set_ami_secret
    fi
}

do_set_ami_secret() {
    sed -i "/^secret\s*=\s*$CURRENT_AMI_SECRET/ s/$CURRENT_AMI_SECRET/$NEW_AMI_SECRET/"	$CONFIG_DIR/manager.conf

    update_file_permissions $CONFIG_DIR/manager.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_select_interface() {
    echo "doing do_interface_type" >>$logfile

    ## interface menu
    ANSWER=$(whiptail								\
		--title "$TITLE"						\
		--menu "Select Radio Interface"					\
		$WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT				\
		--ok-button "Select"						\
		--cancel-button "Back to Node Setup"				\
	        "1" "SimpleUSB    : CM1xx USB Cards no/DSP (URIx or RA-40)"	\
	        "2" "USBRadio     : CM1xx USB Cards with DSP (URIx or RA-40)"	\
	        "3" "RTCM         : Radio Thin Client or Voter Boards"		\
	        "4" "Dahdi/pseudo : No radio interface or HUB node"		\
	        "5" "PCI Quad Radio Card"					\
	        "6" "USRP"							\
	        3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
        return
    fi

    case "$ANSWER" in
        1) do_set_simpleusb	;;
        2) do_set_usbradio	;;
        3) do_set_voter		;;
        4) do_set_pseudo	;;
        5) do_set_quadradio	;;
        6) do_set_usrp		;;
        *) whiptail --msgbox "$ANSWER is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH 1 ;;
    esac
}

do_noload_chan_modules() {
    # Set common app_rpt channel modules to noload
    sed -i "/^load\s*=>\s*chan_simpleusb/ s/load/noload/"	$CONFIG_DIR/modules.conf
    sed -i "/^load\s*=>\s*chan_usbradio/  s/load/noload/"	$CONFIG_DIR/modules.conf
    sed -i "/^load\s*=>\s*chan_usrp/      s/load/noload/"	$CONFIG_DIR/modules.conf
    sed -i "/^load\s*=>\s*chan_voter/     s/load/noload/"	$CONFIG_DIR/modules.conf
    sed -i "/^load\s*=>\s*chan_pi/        s/load/noload/"	$CONFIG_DIR/modules.conf

    # Comment all rxchannels
    sed -i "s/^rxchannel/; rxchannel/g"				$CONFIG_DIR/rpt.conf
}

do_set_simpleusb() {
    echo "doing do_set_simpleusb" >>$logfile

    do_noload_chan_modules

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_simpleusb/ s/noload/load/"				$CONFIG_DIR/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*SimpleUSB/ s/^;\s*rxchannel/rxchannel/"	$CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

do_set_usbradio() {
    echo "doing do_set_usbradio" >>$logfile

    do_noload_chan_modules

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_usbradio/ s/noload/load/"				$CONFIG_DIR/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*Radio/ s/^;\s*rxchannel/rxchannel/"		$CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

do_set_voter() {
    echo "doing do_set_voter" >>$logfile

    do_noload_chan_modules

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_voter/ s/noload/load/"				$CONFIG_DIR/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*Voter/ s/^;\s*rxchannel/rxchannel/"		$CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

do_set_pseudo() {
    echo "doing do_set_pesudo" >>$logfile

    do_noload_chan_modules

    # Load module (is chan_dahdi always loaded?) and set rxchannel
    sed -i "/^noload.\+chan_dahdi/ s/noload/load/"				$CONFIG_DIR/modules.conf
    sed -i '/^;\s*rxchannel\s*=\s*dahdi\/pseudo/ s/;\s*rxchannel/rxchannel/'	$CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

do_set_quadradio() {
    echo "doing do_set_quad" >>$logfile

    do_noload_chan_modules

    # Set rxchannel (No dahdi/pesudo module?)
    sed -i "/^;\s*rxchannel\s*=\s*Dahdi/ s/^;\s*rxchannel/rxchannel/"		$CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

do_set_usrp() {
    echo "doing do_set_usrp" >>$logfile

    do_noload_chan_modules

    # Load module and set rxchannel
    sed -i "/^noload.\+chan_usrp/ s/noload/load/"				$CONFIG_DIR/modules.conf
    sed -i "/^;\s*rxchannel\s*=\s*USRP/ s/^;\s*rxchannel/rxchannel/"		$CONFIG_DIR/rpt.conf

    update_file_permissions $CONFIG_DIR/modules.conf $CONFIG_DIR/rpt.conf

    AST_RESTART=1
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

get_node_settings () {
    #sed remove first and last character
    CURRENT_NODE=$(grep -o '^\[[0-9]*\]' $CONFIG_DIR/rpt.conf | sed 's/^.//;s/.$//')

    #sed captures everything between : and @
    CURRENT_PASSWD=$(grep '^register.*=>\s*' $CONFIG_DIR/rpt_http_registrations.conf | sed 's/.*:\(.*\)@.*/\1/')
    if [[ -z $CURRENT_PASSWD ]]; then
        CURRENT_PASSWD='Not Set'
    fi

    #sed captures alphanumeric between |i and the rest of line
    CURRENT_CALLSIGN=$(grep '^idtalkover\s*=\s*' $CONFIG_DIR/rpt.conf | sed 's/.*|i\([0-9a-zA-Z/-]*\).*/\1/')

    #sed captures digits after =
    CURRENT_DUPLEX=$(grep '^duplex\s*=\s*' $CONFIG_DIR/rpt.conf | sed 's/^duplex\s*=\s*\([0-9]*\).*/\1/')

    #sed removes all before = and any after ;
    CURRENT_INTERFACE=$(grep '^rxchannel\s*=\s*' $CONFIG_DIR/rpt.conf | sed 's/^rxchannel\s*=\s*//;s/\s*;.*$//')

    #sed removes all before = and any after ;
    CURRENT_AMI_SECRET=$(grep '^secret\s*=\s*' $CONFIG_DIR/manager.conf | sed 's/^secret\s*=\s*//;s/\s*;.*$//')

    ANSWER=$(grep -c "^;statpost_url\s*=" $CONFIG_DIR/rpt.conf)
    if [[ $ANSWER -eq 1 ]]; then
        CURRENT_STATPOST="No"
    else
        CURRENT_STATPOST="Yes"
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_interface_tune_cli() {
    get_node_settings
    if [[ $CURRENT_INTERFACE == *"SimpleUSB"* ]]; then
        clear
        /usr/sbin/simpleusb-tune-menu
        RC=$?
        clear
        if [[ $RC -ne 0 ]]; then
            whiptail --title "$TITLE" --msgbox "SimpleUSB CLI did not launch. Try restarting Asterisk." $MSGBOX_HEIGHT $MSGBOX_WIDTH
        fi
    elif [[ $CURRENT_INTERFACE == *"Radio/usb"* ]]; then
        clear
        /usr/sbin/radio-tune-menu
        RC=$?
        clear
        if [[ $RC -ne 0 ]]; then
            whiptail --title "$TITLE" --msgbox "USB Radio CLI did not launch. Try restarting Asterisk." $MSGBOX_HEIGHT $MSGBOX_WIDTH
        fi
    elif [[ $CURRENT_INTERFACE == *"pseudo"* ]]; then
        whiptail --title "$TITLE" --msgbox "No tuning is needed for this node." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    else
        whiptail --title "$TITLE" --msgbox "$CURRENT_INTERFACE is not supported. Use editor." $MSGBOX_HEIGHT $MSGBOX_WIDTH
    fi
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_node_setup_menu_info() {
    read -r -d '' text << EOT
Node Setup Menu Instructions

For new nodes you should choose values for each one of these items.

1 The duplex will be explained when selected. Most often you will set it to 1.
2 The node number (assigned by AllStarLink.org)
3 The node password you were assigned that corresponds with your node number. The node number and password is how your node connects to the AllStarLink network.
4 Your ham radio call sign.
5 The AMI password used for Allmon, Supermon, etc. The AMI password allows other web applications to monitor and control your node from a browser.
6 The type of radio interface. Most often you will use SimpleUSB.
7 Send statistics (yes or no) to "stats.allstarlink.org". This allows you and others to see the status and connections of your node including the location on a map.

These settings will go into effect when Asterisk is restarted.

For help see https://community.allstarlink.org
EOT
    whiptail --title "$TITLE" --scrolltext --msgbox "$text" $WT_HEIGHT $WT_WIDTH
}

do_allstar_node_setup_menu() {
    echo "Node Setup Menu" >>$logfile

    while true; do
        calc_wt_size
        get_node_settings

        ANSWER=$(whiptail					\
		    --title "$TITLE"				\
		    --menu "AllStar Node Setup Menu"		\
		    $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT	\
		    --ok-button "Select"			\
		    --cancel-button "Back to Node Setup"	\
            "1" "Duplex type      : $CURRENT_DUPLEX"		\
            "2" "Node number      : $CURRENT_NODE"		\
            "3" "Node password    : $CURRENT_PASSWD"		\
            "4" "Node callsign    : $CURRENT_CALLSIGN"		\
            "5" "AMI password     : $CURRENT_AMI_SECRET"	\
            "6" "Radio interface  : $CURRENT_INTERFACE"		\
            "7" "Post node status : $CURRENT_STATPOST"		\
            "I" "Node Setup Menu Instructions"			\
            3>&1 1>&2 2>&3)
        if [[ $? -ne 0 ]]; then
            return
        fi

	case "$ANSWER" in
            1) do_select_duplex
	       ;;
            2) do_select_node_number
	       ;;
            3) do_select_node_password
	       ;;
            4) do_select_node_callsign
	       ;;
            5) do_select_ami_secret
	       ;;
            6) do_select_interface
	       ;;
            7) do_select_statpost
	       ;;
            I) do_node_setup_menu_info
	       ;;
            *) whiptail --msgbox "$ANSWER is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH
	       ;;
	esac
    done
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_main_menu_info() {
    read -r -d '' text << EOT
Node Setup Main Menu Instructions

Use arrow keys to scroll, TAB to select <Ok> and then press enter to close these instructions.

Menu item "1" is where you'll configure most of the basic settings for your AllStar node. For servers with more than one node or advanced settings you'll need to use an editor/sftp client such as WinSCP.  But don't worry, everything you need to get your node on the air is here.

Before changing any settings you should make a local backup with menu item "C".  If something goes wrong you'll be able to restore with menu item "R".

Changes will go into effect once Asterisk is restarted with menu item "2".

If this is a new setup, you should do all of item "1", then do menu items "2" and "3". That should be all that is needed to get your node up and running.

For help see https://community.allstarlink.org
EOT
    whiptail --title "$TITLE" --scrolltext --msgbox "$text" $WT_HEIGHT $WT_WIDTH
}

do_main_menu() {
    echo "Node Setup Main Menu" >>$logfile

    while true; do
        calc_wt_size

	NEED_RESTART=""
	if [[ $AST_RESTART -ne 0 ]]; then
	    NEED_RESTART="<-- Needed"
	fi

        ANSWER=$(whiptail						\
		    --title "$TITLE"					\
		    --menu "Node Setup Main Menu"			\
		    $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT		\
		    --ok-button Select					\
		    --cancel-button "Exit Node Setup"			\
	            "1" "AllStar Node Setup Menu"			\
		    "2" "Restart Asterisk         $NEED_RESTART"	\
		    "3" "Interface Tune CLI"				\
		    "C" "Create a local backup"				\
		    "R" "Restore a local backup"			\
		    "I" "Main Menu Instructions"			\
		    3>&1 1>&2 2>&3)
        if [[ $? -ne 0 ]]; then
            do_exit
	    continue
	fi

	case "$ANSWER" in
	    1)	do_allstar_node_setup_menu
		;;
	    2)	AST_RESTART=0
		astres.sh
		RC=$?
		if [ $RC -ne 0 ]; then
		    whiptail --msgbox "Asterisk restart failed (exit code $RC)." $MSGBOX_HEIGHT $MSGBOX_WIDTH
		else
		    whiptail --msgbox "Asterisk restart success." $MSGBOX_HEIGHT $MSGBOX_WIDTH
		fi
		clear
		;;
	    3)	do_interface_tune_cli
		;;
	    C)	do_local_conf_backup
		;;
	    R)	do_local_conf_restore
		;;
	    I)	do_main_menu_info
		;;
	    *)	whiptail --msgbox "$ANSWER is an unrecognized selection." $MSGBOX_HEIGHT $MSGBOX_WIDTH
		;;
	esac
    done
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

do_exit() {
    echo "doing do_exit" >>$logfile

    if [[ $AST_RESTART -ne 0 ]]; then
	whiptail				\
	    --title "$TITLE"			\
	    --yesno "Asterisk must be restarted to make your changes active.\n\nAre you sure you want to exit now?"	\
	    $MSGBOX_HEIGHT $MSGBOX_WIDTH
        if [[ $? -eq 0 ]]; then
            exit 0
        fi
    else
        exit 0
    fi

    return 0	// back to do_main_menu
}

# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

/usr/bin/clear
check_if_root
check_configuration
do_main_menu
